<!DOCTYPE html>
<!--
WinSetView (Globally Set Explorer Folder Views)
Les Ferch, lesferch@gmail.com, 2021 - 2024
WinSetView.htm (GUI tool to select desired views)
-->
<html>
<head>
<title>WinSetView</title>
<meta charset="UTF-8" http-equiv="X-UA-Compatible" content="IE=8">
<htmlApplication
  width=9999
  height=9999
>
<hta:application
  applicationname=WinSetView
  contextmenu=no
>

<script language="JScript">
var Version = "3.0.1";
var ForReading = 1;
var ForWriting = 2;
var Unicode = -1;
var Ansi = 0;
var vbCritical = 16;

// Class for passing parameters
function ClassParam() {
  this.param1 = null;
  this.param2 = null;
  this.param3 = null;
}

var o, oWSH, oFSO, oApp, oFolder, oFile, oFiles, oOption, oElement, oElements;
var oFolderTypes, oSettings, oSearchOnly, oOption1, oOption2, oThemes;
var i, j, Q, V, X, Y, Z, Temp, TestFile, Section, CheckCount, Value, Key, ArrKeys, Result, SubKey;
var AvailHeight, HeadHeight, RequiredWidth, CurrentWidth, Maximized, Fonts, TestFileName;
var AppData, NTVer, WinVer, MajVer, Folder, INIFile, rbShow, BodyHTML, TaggedHTML, Tag, Item, Win11, Win10;
var Language, LangDir, LangFile, LangCount, LangData, LangIndex, UBFolderType, YScrollPos;
var ViewFile, ViewData, FolderTypeFile, Scale, FontsFile, Backup, F1, F2, FTHide, KeepAdvanced;
var ColFile, ColData, SelectedFont1, SelectedFont2, FontFile, LRArrow, aColor = new Array(4);
var CmdLine, Line, Order, sOrder, SelectedSize1, SelectedSize2, GUID, Found, VirtualStore;
var C1, C2, LastColSel, FTindex, Data, Show, TempFile, File, f, PartsDir, ToolsDir, PropFile;
var ColWid, ColShow, SortBy, BaseScale, UpArrow, DnArrow, MyPath, MyFolder, a, b, c;
var Gidx, Midx, Nidx, Pidx, Widx, S1idx, S2idx, S3idx, S4idx, Sort1, Sort2, Sort3, Sort4;
var ArrSort1, ArrSort2, ArrSort3, ArrSort4, ArrFonts;
var ArrSort1Order, ArrSort2Order, ArrSort3Order, ArrSort4Order, ArrGroupByOrder;
var ArrFD, ArrFDV, ArrFDG, LParen, RParen, DetailsIcon, RightClickIcon;
var ArrLang, ArrView, ArrColData, ArrColDataItem, ArrColumnEntry, ArrColumnList, ArrLine;
var ArrData = new Array(22), ArrFolderTypeGUID = new Array(61), ArrFolderType = new Array(61)
var ArrFolderTypeLang = new Array(61), ArrInherit = new Array(61);
var ArrColumnLists, ArrGroupBy, ArrInheritFlag, ArrHTML1, ArrHTML2, ArrViewChoice;
var ArrSortBy, ArrIncludeFlag, ArrIconSize, ArrThemes;
var ColShowLabels, FTCopyIdx, ThemeFile, SectionList, sTheme, CurBld, LWinVer, UBR;
var TempArray, RetVal, DialogArgs, DialogOptions, id, GrpUpArrow, GrpDnArrow;
var Warning, OptIcon, DialogTop, HighContrast, SysRoot, WinWoW, PSDir, PSExe, PSSubDir;
var Txt1Data, Txt2Data, WinSys, ExeErr, ArrExe, UseLight, DarkMode;
var WinSizePos, aWinSizePos, GotError, TaskbarTop, MSHTMLVer, eso, NewerAvailable;
var ApplyViews, ApplyOptions, altKey;

Z = "\r\n";
Q = String.fromCharCode(34);
Language = "en-US";
KeepAdvanced = false;

oFSO = new ActiveXObject("Scripting.FileSystemObject");
oWSH = new ActiveXObject("WScript.Shell");
oApp = new ActiveXObject("Shell.Application");

function MsgBox(prompt, buttons, title) {
  var result = oWSH.Popup(prompt, 0, title, buttons);
  return(result);
}

function Quit(){
  self.close();
  window.close();
  window.external.Close;
}

SysRoot = oWSH.ExpandEnvironmentStrings("%SystemRoot%");
WinSys = SysRoot + "\\System32\\";
WinWoW = SysRoot + "\\SysWOW64\\";

oFile = oApp.Namespace(0).ParseName(WinSys + "MSHTML.dll");
MSHTMLVer = Number(oFile.ExtendedProperty("System.Software.ProductVersion").split(".")[0]);

if (MSHTMLVer < 11) {
  MsgBox("MSHTML 11 is required. Update IE to get the latest MSHTML.", vbCritical, "Error");
  Quit();
}

// Determine Windows version (also works for Windows Server)
// Treat Windows 11 same as Windows 10 because they have same folder types and properties

NTVer = oWSH.RegRead("HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\CurrentVersion");
WinVer = "";
if (NTVer == "6.1") WinVer = "7";
if (NTVer == "6.2" || NTVer == "6.3") WinVer = "8";
try { MajVer = oWSH.RegRead("HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\CurrentMajorVersionNumber"); } catch (e) {}
try { CurBld = oWSH.RegRead("HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\CurrentBuild"); } catch (e) {}
try { UBR = oWSH.RegRead("HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\UBR"); } catch (e) {}

if (MajVer >= 10) WinVer = "10";
LWinVer = WinVer;

Win10 = false;
Win11 = false;
if (CurBld > 18363 && CurBld < 21996) Win10 = true;
if (CurBld >= 21996) Win11 = true;

if (Win11) LWinVer = "11";

if (WinVer != "7" && WinVer != "8" && WinVer != "10") {
  MsgBox("Windows 7, 8, 10, or higher is required.", vbCritical, "Error");
  Quit();
}

Temp = oWSH.ExpandEnvironmentStrings("%Temp%");
MyFolder = oWSH.CurrentDirectory;

if (!oFSO.FolderExists("Language")) {
  oWSH.CurrentDirectory = window.external.ExecutableDir;
  MyFolder = oWSH.CurrentDirectory;
  if (MyFolder.indexOf(Temp) != -1) {
    MsgBox("Cannot run directly from zip file." + Z + Z + "Please EXTRACT entire zip file and then run.", vbCritical, "Error");
  } else {
    MsgBox("Language folder missing", vbCritical, "Error");
  }
  Quit();
}

if (!oFSO.FolderExists("AppParts")) {
  MsgBox("AppParts folder missing", vbCritical, "Error");
  Quit();
}

if (MyFolder.indexOf("[") != -1 || MyFolder.indexOf("]") != -1) {
  a = "Current directory: " + MyFolder + Z + Z;
  b = "Due to a PowerShell issue, this script cannot run from a directory containing '[' or ']'";
  c = Z + Z + "Please rename the current directory.";
  MsgBox(a + b + c, vbCritical, "Error");
  Quit();
}

PSSubDir = "WindowsPowerShell\\v1.0\\";
PSDir = WinSys + PSSubDir;
if (oFSO.FolderExists(WinWoW)) PSDir = WinWoW + PSSubDir;
PSExe = PSDir + "PowerShell.exe";

ExeErr = "";
if (!oFSO.FileExists(PSExe)) ExeErr += "PowerShell.exe" + Z;
ArrExe = "TaskKill.exe,Icacls.exe,Reg.exe,Cmd.exe".split(",");
for (i = 0; i < ArrExe.length; i++) {
  if (!oFSO.FileExists(WinSys + ArrExe[i])) ExeErr += ArrExe[i] + Z;
}
if (ExeErr != "") {
  MsgBox("The following required system files were not found:" + Z + Z + ExeErr, vbCritical, "Error");
  Quit();
}

function getSetting(dict, key) {
  var result = dict.Item(key);
  if (!result) result = "";
  return result
}

function Trim(str) {
  return str.replace(/^\s+|\s+$/g, '');
}

function Replace(str, search, replacement) {
  var escapedSearch = search.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
  var regex = new RegExp(escapedSearch, "g");
  return str.replace(regex, replacement);
}

function LCase(str) {
  return str.toLowerCase()
}

function IsNumeric(value) {
    return value !== null && value !== "" && !isNaN(value);
}

HighContrast = oWSH.RegRead("HKCU\\Control Panel\\Accessibility\\HighContrast\\Flags") == "127";

WinSizePos = "";
TaskbarTop = false;
UseLight = "";
try { WinSizePos = oWSH.RegRead("HKCU\\Software\\WinSetView\\WinSizePos"); } catch (e) {}
try { TaskbarTop = new VBArray(oWSH.RegRead("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StuckRects2\\Settings")).toArray()[12] == 1; } catch (e) {}
try { TaskbarTop = new VBArray(oWSH.RegRead("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StuckRects3\\Settings")).toArray()[12] == 1; } catch (e) {}
try { UseLight = oWSH.RegRead("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize\\AppsUseLightTheme"); } catch (e) {}

DarkMode = true;
if (UseLight === "" || UseLight == 1) DarkMode = false;

function TaskbarAdjust(y) {
  if (TaskbarTop) {
    var TaskbarHeight = screen.height - screen.availHeight + 4;
    if (y < TaskbarHeight) y = TaskbarHeight;
  }
  return y;
}

if (WinSizePos != "") {
  aWinSizePos = WinSizePos.split(",");
  if (Number(aWinSizePos[2]) == -32000) {
    WinSizePos = "";
  } else {
    try {
      window.resizeTo(Number(aWinSizePos[0]), Number(aWinSizePos[1]));
      window.moveTo(Number(aWinSizePos[2]), Number(aWinSizePos[3]));
      GotError = false;
    } catch (e) {
      GotError = true;
    }
  }
}

if (WinSizePos == "" || GotError) {
  RequiredWidth = 700;
  if (RequiredWidth > screen.availWidth) RequiredWidth = screen.availWidth;
  window.resizeTo(RequiredWidth, screen.availHeight);
  window.moveTo((screen.availWidth - RequiredWidth) / 2, TaskbarAdjust(4));
}

oSearchOnly = new ActiveXObject("Scripting.Dictionary");
oSearchOnly.Add("ItemFolderPathDisplay", "");
oSearchOnly.Add("ItemFolderPathDisplayNarrow", "");
oSearchOnly.Add("ItemPathDisplay", "");
oSearchOnly.Add("ItemFolderNameDisplay", "");

BaseScale = GetScale();
Scale = BaseScale;

TempFile = Temp + "\\WinSetView.tmp";
PropFile = Temp + "\\Properties.tmp";

LangDir = MyFolder + "\\Language\\";
PartsDir = MyFolder + "\\AppParts\\";
ToolsDir = MyFolder + "\\Tools\\";
AppData = MyFolder + "\\AppData";
Backup = MyFolder + "\\AppData\\Backup";
FontsFile = PartsDir + "Fonts.txt";
ThemeFile = PartsDir + "Themes.ini";

if (WinVer == "7" || WinVer == "8") {
  UpArrow = "↑";
  DnArrow = "↓";
  GrpUpArrow = "(↑)";
  GrpDnArrow = "(↓)";
  LRArrow = "←→";
  OptIcon = "☼";
  Warning = "!";
  DetailsIcon = "⋮⋮";
  RightClickIcon = "⋮";
} else {
  UpArrow = "⮬";
  DnArrow = "⮯";
  GrpUpArrow = "(⮬)";
  GrpDnArrow = "(⮯)";
  LRArrow = "⟷";
  OptIcon = "⚙";
  Warning = "⚠";
  DetailsIcon = "⋮⋮⋮";
  RightClickIcon = "⋮";
}

// Set AppData to current folder if we have write access
// Otherwise set AppData to user profile AppData

TestFileName = Replace(Replace(Replace(new Date().toString(), "/", ""), ":", ""), " ", "") + ".txt";
TestFile = ".\\" + TestFileName;
try {
  f = oFSO.OpenTextFile(TestFile, ForWriting, true, Ansi);
  f.Write("");
  f.Close();
} catch (e) {}
if (oFSO.FileExists(TestFile)) {
  VirtualStore = oWSH.ExpandEnvironmentStrings("%LOCALAPPDATA%") + "\\VirtualStore" + MyFolder.substr(2) + "\\";
  if (oFSO.FileExists(VirtualStore + TestFileName)) AppData = VirtualStore + "AppData";
  oFSO.DeleteFile(TestFile);
} else {
  AppData = oWSH.ExpandEnvironmentStrings("%APPDATA%") + "\\WinSetView";
  Backup = AppData + "\\Backup";
}
if (!oFSO.FolderExists(AppData)) oFSO.CreateFolder(AppData);
if (!oFSO.FolderExists(Backup)) oFSO.CreateFolder(Backup);

// Copy Default INI files to AppData folder with overwrite off

if (oFSO.FolderExists(MyFolder + "\\Defaults\\")) {
  oFolder = oFSO.GetFolder(MyFolder + "\\Defaults\\");
  oFiles = new Enumerator(oFolder.Files);
  if (oFiles) {
    for (; !oFiles.atEnd(); oFiles.moveNext()) {
      try { oFSO.CopyFile(oFiles.item(), AppData + "\\", false); } catch (e) {}
    }
  }
}

// See if there are any backup reg files in the Backup folder

oFolder = oFSO.GetFolder(Backup);
oFiles = new Enumerator(oFolder.Files);
rbShow = false;
for (; !oFiles.atEnd(); oFiles.moveNext()) {
  if (LCase(oFSO.GetExtensionName(oFiles.item().Name)) == "reg") rbShow = true;
}

// Get data from INI file

INIFile = AppData + "\\Win" + WinVer + ".ini";
oSettings = new ActiveXObject("Scripting.Dictionary");
oThemes = new ActiveXObject("Scripting.Dictionary");
if (oFSO.FileExists(INIFile)) oSettings = Ini2Dict(INIFile);
if (oFSO.FileExists(ThemeFile)) oThemes = Ini2Dict(ThemeFile);
ArrThemes = SectionList.split("|");

// Set language choice from INI or Windows

SetLang();

// Ensure none of the additional files are blocked

function ClearBlock(Folder) {
    oFolder = oFSO.GetFolder(Folder);
    oFiles = new Enumerator(oFolder.Files);
    for (; !oFiles.atEnd(); oFiles.moveNext()) {
      try {
      f = oFSO.OpenTextFile(oFiles.item().Path + ":Zone.Identifier", ForWriting);
      f.Write("");
      f.Close();
      } catch (e) {}
    }
}

ClearBlock(ToolsDir);
ClearBlock(PartsDir);


// Calculate current window size and position and save to registry

window.onunload = function () {
  var w, h;
  w = window.external.Width;
  h = window.external.Height;
  x = window.external.Left;
  y = window.external.Top;
  if (x != -32000) oWSH.RegWrite("HKCU\\Software\\WinSetView\\WinSizePos", w + "," + h + "," + x + "," + y);

}

function SetLangIndex(){
  if (LangCount > 0) {
    LangIndex = 0;
    for (i = 0; i < LangCount; i++) {
      if (LCase(Language) == LCase(Lang.options[i].value)) {
        LangIndex = i;
        break;
      }
    }
    Lang.selectedIndex = LangIndex;
  }
}

window.onload = function () {
  if (DarkMode) document.body.style.backgroundColor = "#202020";

  Vp1.innerHTML = Version;
  Vp2.innerHTML = Version;
  Vp3.innerHTML = Version;
  Vp4.innerHTML = Version;

  // Populate language dropdown menu

  LangCount = 0;
  if (oFSO.FolderExists(LangDir)) {
    oFolder = oFSO.GetFolder(LangDir);
    oFolder = new Enumerator(oFolder.SubFolders);
    for (; !oFolder.atEnd(); oFolder.moveNext()) {
      Folder = oFSO.GetBaseName(oFolder.item());
      LangCount++;
      oOption = document.createElement("Option");
      oOption.text = Folder;
      oOption.value = Folder;
      Lang.add(oOption);
    }
  }

  // Set language drop down item to selected language

  SetLangIndex()

  // Populate font menu

  for (i = 8; i <= 24; i++) {
    oOption1 = document.createElement("Option");
    oOption1.text = i;
    oOption1.value = i;
    Size1.add(oOption1);
    oOption2 = document.createElement("Option");
    oOption2.text = i;
    oOption2.value = i;
    Size2.add(oOption2);
  }

  // Populate horizontal scroll control menu

  for (i = 0; i <= 9; i++) {
    oOption = document.createElement("Option");
    if (i == 0) {
      oOption.disabled = true;
      oOption.text = "⟷";
      oOption.value = i;
    } else {
      oOption.text = i;
      oOption.value = i;
    }
    xs.add(oOption);
  }

  cbo.value = DetailsIcon;
  cbc.value = RightClickIcon;

  if (WinVer == "7" || WinVer == "8") {
    bc1.value = "⊕";
    bc2.value = "⊕";
    bc3.value = "⊕";
    bc4.value = "⊕";
    ba.value = "↑↓";
  }

  // Save current body HTML so that language can be switched without restarting
  TaggedHTML = document.body.innerHTML;

  // Set up pages in selected language and font
  UpdateLang(false);
}

function UpdateCheck() {
  var oReq, Latest, aLatest, aVersion;
  oReq = new ActiveXObject("Msxml2.XMLHttp");
  x = "https://raw.githubusercontent.com/LesFerch/WinSetView/main/VersionHistory.md";
  try {
    oReq.Open("GET", x, false);
    oReq.Send();
    x = oReq.responseText;
  } catch (e) { return; }
  if (x.charAt(0) != "#") return;
  x = x.split("\n")[0];
  Latest = x.substr(3);
  aLatest = Latest.split(".");
  aVersion = Version.split(".");
  for (i = 0; i < 3; i++) {
    j = i;
    if (Number(aLatest[i]) != Number(aVersion[i])) break;
  }
  NewerAvailable = false;
  if (Number(aLatest[j]) > Number(aVersion[j])) {
    NewerAvailable = true;
    hb.value = ArrLang[46];
    Vp1.innerHTML = Version + " (" + ArrLang[45] + " " + Latest + ")";
    UpdateRequiredWidth();
  }
}

function UpdateRequiredWidth() {
  RequiredWidth = twid.scrollWidth + parseInt(BaseScale * 54);
  if (RequiredWidth > screen.availWidth) RequiredWidth = screen.availWidth;
}

// The following code is needed for scaling the checkboxes and radio buttons
// If user changes scale, they must logout/login for this registry value to change

function GetScale() {
  var scale = 1.0;
  try { scale = oWSH.RegRead("HKCU\\Control Panel\\Desktop\\WindowMetrics\\AppliedDPI") / 96; } catch (e) {}
  return scale;
}

// Get data from INI file into scripting dictionary

function Ini2Dict(INIFile) {
  SectionList = "";
  var oDict = new ActiveXObject("Scripting.Dictionary");
  if (oFSO.FileExists(INIFile)) {
    oFile = oFSO.OpenTextFile(INIFile, ForReading, false, Ansi);
    while (!oFile.AtEndOfStream) {
      Line = Trim(oFile.ReadLine());
      if (Line != "" && Line.charAt(0) != ";") {
        if (Line.charAt(0) == "[") {
          Section = Line;
          if (SectionList != "") SectionList += "|";
          SectionList += Replace(Replace(Section, "[", ""), "]", "");
        } else {
          ArrLine = Line.split("=");
          if (ArrLine.length == 2) oDict.add(Section + ArrLine[0], ArrLine[1]);
        }
      }
    }
    oFile.Close();
  }
  return oDict;
}

// Set preferred language

function SetLang() {
  Language = "en-US";

  try { Language = oWSH.RegRead("HKCU\\Control Panel\\International\\LocaleName"); } catch (e) {}
  try { Language = oWSH.RegRead("HKCU\\Control Panel\\Desktop\\PreferredUILanguages")(0); } catch (e) {}

  if (oSettings.Exists("[Options]Language")) Language = getSetting(oSettings, "[Options]Language");
    
  if (!oFSO.FolderExists(LangDir + Language)) Language = "en-US";

  if (!oFSO.FolderExists(LangDir + Language)) {
    MsgBox("Language folder missing: " + LangDir + Language, vbCritical, "Error");
    Quit();
  }
}

// Update pages with selected language, font, and size

function FTHideUnHide(i, HideAll) {
  if (ArrIncludeFlag[i] == "0" || HideAll) {
    document.getElementById(i + "FTtitle").className = "ftl";
    document.getElementById(i + "FTsettings").style.display = "none";
    document.getElementById(i + "Include").checked = false;
    document.getElementById(i + "Inspect").style.display = "none";
  } else {
    document.getElementById(i + "FTtitle").className = "ft";
    document.getElementById(i + "FTsettings").style.display = "block";
    document.getElementById(i + "Include").checked = true;
    if (IFace.selectedIndex == 2) document.getElementById(i + "Inspect").style.display = "inline";
  }
}

function UpdateLang(OnChange) {

  // Read in language file
  if (LangCount > 0) {
    LangIndex = Lang.selectedIndex;
    Language = Lang.options[LangIndex].value;
    LangFile = LangDir + Language + "\\Labels.txt";
    if (oFSO.FileExists(LangFile)) {
      f = oFSO.OpenTextFile(LangFile, ForReading, false, Unicode);
      LangData = f.ReadAll();
      f.Close();
    }
  }

  // Make first array element a blank line so that text editor line numbers match array indices
  ArrLang = (Z + LangData).split(Z);

  FolderTypeFile = LangDir + Language + "\\FolderTypes.txt";

  // Read FolderType file contents into an array
  // If Win 7 or 8, skip folder types that don't exist
  if (oFSO.FileExists(FolderTypeFile)) {
    oFile = oFSO.OpenTextFile(FolderTypeFile, ForReading, false, Unicode);
    oFolderTypes = new ActiveXObject("Scripting.Dictionary");
    i = -1;
    while (!oFile.AtEndOfStream) {
      Line = Trim(oFile.ReadLine());
      if (Line != "" && Line.charAt(0) != ";" && Line.indexOf(";") > -1) {
        ArrLine = Line.split(";");
        GUID = Trim(ArrLine[0]);
        Found = true;
        if (!(WinVer == "10" || i == -1)) {
          try {
            oWSH.RegRead("HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderTypes\\" + GUID + "\\CanonicalName");
          } catch (e) {
            Found = false;
          }
          if (ArrLine[1].indexOf("StorageProvider") > -1) Found = false;
        }
        if (Found) {
          i++;
          ArrFolderTypeGUID[i] = GUID;
          ArrFolderType[i] = Trim(ArrLine[1]);
          ArrFolderTypeLang[i] = Trim(ArrLine[2]);
          oFolderTypes.Add(ArrLine[1], i);
        }
      }
    }
    oFile.Close();
  } else {
    ArrFolderType[0] = "Global";
    ArrFolderTypeLang[0] = "Global";
  }

  // Set upper bound of folder types
  UBFolderType = i;
  var n = UBFolderType + 1;

  ArrSort1 = new Array(n);
  ArrSort2 = new Array(n);
  ArrSort3 = new Array(n);
  ArrSort4 = new Array(n);
  ArrSort1Order = new Array(n);
  ArrSort2Order = new Array(n);
  ArrSort3Order = new Array(n);
  ArrSort4Order = new Array(n);
  ArrColumnLists = new Array(n);
  ArrGroupBy = new Array(n);
  ArrViewChoice = new Array(n);
  ArrIconSize = new Array(n);
  ArrHTML1 = new Array(n);
  ArrInheritFlag = new Array(n);
  ArrIncludeFlag = new Array(n);
  ArrGroupByOrder = new Array(n);
  ArrFD = new Array(n);
  ArrFDV = new Array(n);
  ArrFDG = new Array(n);

  // Set up inheritance based upon first string match up to first period in folder type
  // For StorageProvider (OneDrive) items, match inheritance on next part of string
  for (i = 0; i <= UBFolderType; i++) {
    if (ArrFolderType[i].indexOf(".") > -1) {
      Key = ArrFolderType[i].split(".")[0];
      ArrInherit[i] = oFolderTypes.Item(Key);
    } else {
      if (ArrFolderType[i].indexOf("StorageProvider") > -1) {
        Key = ArrFolderType[i].substr(15);
        ArrInherit[i] = oFolderTypes.Item(Key);
      } else {
        ArrInherit[i] = 0;
      }
    }
  }

  // For easier reference, copy data from scripting dictionary to variables
  Dict2Var(OnChange);

  // Get Details view column headings

  ColFile = LangDir + Language + "\\Columns-Win" + LWinVer + ".txt";
  f = oFSO.OpenTextFile(ColFile, ForReading, false, Unicode);
  ColData = f.ReadAll();
  f.Close();

  // Add Icaros properties if they are activated
  var Icaros = false;
  try {
    oWSH.RegRead("HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved\\{0C08E3BB-D10B-4CC9-B1B3-701F5BE9D6EC}");
    Icaros = true;
  } catch (e) {}
  if (Icaros) {
    var IcarosFile = LangDir + Language + "\\Columns-Icaros.txt";
    f = oFSO.OpenTextFile(IcarosFile, ForReading, false, Unicode);
    ColData = ColData + Z + f.ReadAll();
    f.Close();
    ColData = Replace(ColData, Z + Z, Z);
  }

  // Add other non-System properties
  var ExePath = PartsDir + "GetMoreProperties.exe";
  try { oFSO.DeleteFile(PropFile); } catch (e) {}
  if (oFSO.FileExists(ExePath)) {
    oWSH.Run('"' + ExePath + '"', 0, true);
    if (oFSO.FileExists(PropFile)) {
      f = oFSO.OpenTextFile(PropFile, ForReading, false, Unicode);
      ColData = ColData + Z + f.ReadAll();
      f.Close();
      ColData = Replace(ColData, Z + Z, Z);
    }
  }

  ArrColData = ColData.split(Z);
  ArrHTML2 = new Array(ArrColData.length);


  // Dynamically generate HTML page data
  BuildPages();

  Pg1.style.visibility = "visible";

  window.external.SetWindowTitle("WinSetView (" + ArrLang[1] + ")");
  Lang.selectedIndex = LangIndex;
  Size1.selectedIndex = SelectedSize1 - 8;
  Size2.selectedIndex = SelectedSize2 - 8;
  IFace.selectedIndex = 1;

  ViewFile = LangDir + Language + "\\ViewList.txt";

  if (oFSO.FileExists(ViewFile)) {
    // Get View menu data from file
    f = oFSO.OpenTextFile(ViewFile, ForReading, false, Unicode);
    ViewData = f.ReadAll();
    f.Close();
    ArrView = ViewData.split(Z);

    // Populate the two View menus on the Options page
    
    for (j = 0; j <= 8; j++) {
      oOption = document.createElement("Option");
      oOption.text = ArrView[j];
      oOption.value = j;
      if (j == 0) oOption.disabled = true;
      tpv.add(oOption);
      oOption = document.createElement("Option");
      oOption.text = ArrView[j];
      oOption.value = j;
    }

    // Populate each folder type setting (View, IconSize, GroupBy, SortBy, and Columns to display)
    
    for (i = 0; i <= UBFolderType; i++) {
      for (j = 0; j <= 8; j++) {
        oOption = document.createElement("Option");
        oOption.text = ArrView[j];
        oOption.value = j;
        if (j == 0) oOption.disabled = true;
        document.getElementById(i + "View").add(oOption);
      }

      if (ArrViewChoice[i] != "") {
        document.getElementById(i + "View").selectedIndex = ArrViewChoice[i];
      } else {
        document.getElementById(i + "View").selectedIndex = 1;
        ArrViewChoice[i] = 1;
      }

      if (ArrIconSize[i] == "") {
        IconSizeUpdate(i);
      } else {
        document.getElementById(i + "IconSize").value = ArrIconSize[i];
        document.getElementById(i + "IconSize").disabled = ArrIconSize[i] == "";
      }

      if (i > 0) {
        x = ArrIconSize[i] == "" ? "" : " [" + ArrIconSize[i] + "]";
        document.getElementById(i + "FTView").innerHTML = ArrView[0] + ": " + ArrView[ArrViewChoice[i]] + x;
      }

      if (ArrGroupByOrder[i] == "") ArrGroupByOrder[i] = "+";
      if (ArrGroupBy[i] == "") {
        document.getElementById(i + "GroupBy").innerHTML = ArrView[9]; // None
      } else {
        try {document.getElementById(i + "GroupBy").innerHTML = ArrGroupByOrder[i] + document.getElementById("L~" + ArrGroupBy[i]).value;} catch (e) {}
      }

      if (ArrSort1[i] == "") ArrSort1[i] = "ItemNameDisplay";
      if (ArrSort1Order[i] == "") ArrSort1Order[i] = "+";
      try { Sort1 = ArrSort1Order[i] + document.getElementById("L~" + ArrSort1[i]).value; } catch (e) {}
      Sort2 = "";
      Sort3 = "";
      Sort4 = "";
      try { if (ArrSort2[i] != "") Sort2 = ArrSort2Order[i] + document.getElementById("L~" + ArrSort2[i]).value; } catch (e) {}
      try { if (ArrSort3[i] != "") Sort3 = ArrSort3Order[i] + document.getElementById("L~" + ArrSort3[i]).value; } catch (e) {}
      try { if (ArrSort4[i] != "") Sort4 = ArrSort4Order[i] + document.getElementById("L~" + ArrSort4[i]).value; } catch (e) {}
      SortBy = Sort1;
      if (Sort2 != "") SortBy += ", " + Sort2;
      if (Sort3 != "") SortBy += ", " + Sort3;
      if (Sort4 != "") SortBy += ", " + Sort4;

      document.getElementById(i + "SortBy").innerHTML = SortBy;

      if (i > 0) {
        document.getElementById(i + "Inherit").checked = ArrInheritFlag[i] == "1";
        document.getElementById(i + "Include").checked = ArrIncludeFlag[i] == "1";
        if (ArrInheritFlag[i] == "1") {
          document.getElementById(i + "FTcontrols").style.display = "none";
        } else {
          document.getElementById(i + "FTView").style.display = "none";
        }
      }

      ArrColumnList = ArrColumnLists[i].split(";");

      ColShow = "";

      for (j = 0; j < ArrColumnList.length; j++) {
        ArrColumnEntry = ArrColumnList[j].split(",");
        if (ArrColumnEntry[0] == "0") {
          if (ColShow != "") ColShow += " | ";
          ColShowColor(ArrColumnEntry[2]);
          try { ColShow += "<span class=" + x + ">" + document.getElementById("L~" + ArrColumnEntry[2]).value + "</span>"; } catch (e) {}
        }
      }

      document.getElementById(i + "ColShow").innerHTML = ColShow;
      UpdateFDView(i);
    }
  }

  // Get list of fonts from file

  if (!oFSO.FileExists(FontsFile)) {
    ArrFonts = [SelectedFont1, SelectedFont2];
  } else {
    f = oFSO.OpenTextFile(FontsFile, ForReading, false, Ansi);
    Fonts = f.ReadAll();
    f.Close();
    ArrFonts = Fonts.split(Z);
  }

  // Populate font menu

  for (i = 0; i < ArrFonts.length; i++) {
    oOption1 = document.createElement("Option");
    oOption2 = document.createElement("Option");
    if (ArrFonts[i] != "") {
      oOption1.text = ArrFonts[i];
      oOption2.text = ArrFonts[i];
      oOption1.value = ArrFonts[i];
      oOption2.value = ArrFonts[i];
      Font1.add(oOption1);
      Font2.add(oOption2);
      if (SelectedFont1 == ArrFonts[i]) Font1.selectedIndex = i;
      if (SelectedFont2 == ArrFonts[i]) Font2.selectedIndex = i;
    }
  }

  // Create Theme Select element with translated labels
  for (i = -1; i < ArrThemes.length; i++) {
    oOption = document.createElement("Option");
    if (i == -1) {
      oOption.disabled = true;
      oOption.text = ArrLang[37];
      oOption.value = ArrLang[37];
    } else {
      x = Replace(Replace(ArrThemes[i], "Light", ArrLang[38]), "Dark", ArrLang[39]);
      oOption.text = x;
      oOption.value = ArrThemes[i];
    }
    Theme.add(oOption);
  }

  // Copy remaining settings from scripting dictionary to the HTML pages
  Dict2Dom();

  // Update page elements to selected font and size
  UpdateFont1();

  if (KeepAdvanced) IFace.selectedIndex = 2;

  // Hide or unhide controls based on Reset checkbox
  OptionReset();

  // Hide Restore button if no backup files
  if (!rbShow) rb.style.display = "None";

  SetInterface();

  SetTheme();

  xschange();
}

function ColShowColor(e) {
  x = "X1";
  if (e == "Search.Rank") x = "X2";
  if (oSearchOnly.Exists(e)) {
    x = so.checked ? "X4" : "X3";
  }
  if (HighContrast) x += "HC";
}

// Get preferred font for the selected language and Windows version

function GetFontFromFile() {
  FontFile = "";
  F1 = LangDir + Language + "\\Font-Win" + WinVer + ".txt";
  F2 = LangDir + Language + "\\Font.txt";
  if (oFSO.FileExists(F1)) {
    FontFile = F1;
  } else {
    if (oFSO.FileExists(F2)) FontFile = F2;
  }
  if (FontFile != "") {
    oFile = oFSO.OpenTextFile(FontFile, ForReading, false, Ansi);
    SelectedFont1 = oFile.ReadLine();
    oFile.Close();
  }
}

// Populate variables from settings dictionary object

function Dict2Var(OnChange) {
  if (OnChange) {
    GetFontFromFile();
  } else {
    SelectedFont1 = "Segoe UI"; SelectedSize1 = "11"; SelectedFont2 = "Consolas"; SelectedSize2 = "10";
    GetFontFromFile();
    if (oSettings.Exists("[Options]Font1")) SelectedFont1 = getSetting(oSettings, "[Options]Font1");
    if (oSettings.Exists("[Options]Font2")) SelectedFont2 = getSetting(oSettings, "[Options]Font2");
    if (oSettings.Exists("[Options]Size1")) SelectedSize1 = getSetting(oSettings, "[Options]Size1");
    if (oSettings.Exists("[Options]Size2")) SelectedSize2 = getSetting(oSettings, "[Options]Size2");
  }

  for (i = 0; i <= UBFolderType; i++) {
    ArrViewChoice[i] = getSetting(oSettings, "[" + ArrFolderType[i] + "]View");
    ArrIconSize[i] = getSetting(oSettings, "[" + ArrFolderType[i] + "]IconSize");
    ArrColumnLists[i] = getSetting(oSettings, "[" + ArrFolderType[i] + "]ColumnList");
    ArrGroupBy[i] = getSetting(oSettings, "[" + ArrFolderType[i] + "]GroupBy");
    ArrGroupByOrder[i] = getSetting(oSettings, "[" + ArrFolderType[i] + "]GroupByOrder");
    ArrFD[i] = getSetting(oSettings, "[" + ArrFolderType[i] + "]FileDialogOption");
    ArrFDV[i] = getSetting(oSettings, "[" + ArrFolderType[i] + "]FileDialogView");
    ArrFDG[i] = getSetting(oSettings, "[" + ArrFolderType[i] + "]FileDialogNG");
    ArrInheritFlag[i] = getSetting(oSettings, "[" + ArrFolderType[i] + "]Inherit");
    ArrIncludeFlag[i] = getSetting(oSettings, "[" + ArrFolderType[i] + "]Include");
    if (!ArrColumnLists[i]) ArrColumnLists[i] = "0,34,ItemNameDisplay";
    if (!ArrInheritFlag[i]) ArrInheritFlag[i] = "1";
    if (!ArrIncludeFlag[i]) {
      if (ArrFolderType[i] == "FileItemAPIs") {
        ArrIncludeFlag[i] = "0";
      } else {
        ArrIncludeFlag[i] = "1";
      }
    }
    ArrSort1Order[i] = "+"; ArrSort1[i] = "ItemNameDisplay";
    ArrSort2Order[i] = "+"; ArrSort2[i] = "";
    ArrSort3Order[i] = "+"; ArrSort3[i] = "";
    ArrSort4Order[i] = "+"; ArrSort4[i] = "";
    SortBy = getSetting(oSettings, "[" + ArrFolderType[i] + "]SortBy");
    ArrSortBy = (SortBy + ";;;").split(";");
    ArrSortBy.length = 4; // Simulates ReDim Preserve
    ArrSort1Order[i] = ArrSortBy[0].charAt(0); ArrSort1[i] = ArrSortBy[0].substr(1);
    ArrSort2Order[i] = ArrSortBy[1].charAt(0); ArrSort2[i] = ArrSortBy[1].substr(1);
    ArrSort3Order[i] = ArrSortBy[2].charAt(0); ArrSort3[i] = ArrSortBy[2].substr(1);
    ArrSort4Order[i] = ArrSortBy[3].charAt(0); ArrSort4[i] = ArrSortBy[3].substr(1);
    if (ArrSort1Order[i] != "+" && ArrSort1Order[i] != "-") {
      ArrSort1[i] = ArrSort1Order[i] + ArrSort1[i]; ArrSort1Order[i] = "+";
    }
    if (ArrSort2Order[i] != "+" && ArrSort2Order[i] != "-") {
      ArrSort2[i] = ArrSort2Order[i] + ArrSort2[i]; ArrSort2Order[i] = "+";
    }
    if (ArrSort3Order[i] != "+" && ArrSort3Order[i] != "-") {
      ArrSort3[i] = ArrSort3Order[i] + ArrSort3[i]; ArrSort3Order[i] = "+";
    }
    if (ArrSort4Order[i] != "+" && ArrSort4Order[i] != "-") {
      ArrSort4[i] = ArrSort4Order[i] + ArrSort4[i]; ArrSort4Order[i] = "+";
    }
  }
}

// Populate HTML pages directly from scripting dictionary for some settings

function Dict2Dom() {
  wd.checked = SetInitial("[Options]Reset", 0);
  bu.checked = SetInitial("[Options]Backup", 1);
  se.checked = SetInitial("[Options]ShowExt", 1);
  cv.checked = SetInitial("[Options]CompView", 1);
  hf.checked = SetInitial("[Options]ShowHidden", 0);
  gn.checked = SetInitial("[Options]Generic", 0);
  so.checked = SetInitial("[Options]SearchOnly", 1);
  vf.checked = SetInitial("[Options]SetVirtualFolders", 0);
  ns.checked = SetInitial("[Options]NoSuggestions", 1);
  nn.checked = SetInitial("[Options]NoNumericalSort", 0);
  ts.checked = SetInitial("[Options]Win10Search", 0);
  ee.checked = SetInitial("[Options]Win11Explorer", 0);
  ls.checked = SetInitial("[Options]LegacySpacing", 0);
  fr.checked = SetInitial("[Options]NoFullRowSelect", 0);
  ld.checked = SetInitial("[Options]LegacyDialogFix", 0);
  es.checked = SetInitial("[Options]ExplorerStart", 0);
  esi.value = SetInitial("[Options]ExplorerStartPath", "C:\\");
  ex.checked = SetInitial("[Options]Win10Explorer", 0);
  nf.checked = SetInitial("[Options]NoFolderThumbs", 0);
  ua.checked = SetInitial("[Options]UnhideAppData", 0);
  pd.checked = SetInitial("[Options]UnhidePublicDesktop", 0);
  sc.checked = SetInitial("[Options]ClassicSearch", 0);
  hg.checked = SetInitial("[Options]HomeGrouping", 0);
  lg.checked = SetInitial("[Options]LibraryGrouping", 0);
  cm.checked = SetInitial("[Options]ClassicContextMenu", 1);
  mc.checked = SetInitial("[Options]CopyMoveInMenu", 0);
  si.checked = SetInitial("[Options]NoSearchInternet", 0);
  sh.checked = SetInitial("[Options]NoSearchHighlights", 0);
  tp.checked = SetInitial("[Options]ThisPCoption", 1);
  tpg.checked = SetInitial("[Options]ThisPCNG", 0);
  tpv.selectedIndex = SetInitial("[Options]ThisPCView", 3);
  xs.selectedIndex = SetInitial("[Options]Scroll", 1);
  IFace.selectedIndex = SetInitial("[Options]Interface", 1);
  Theme.selectedIndex = SetInitial("[Options]ThemeIndex", 1);
  eso = SetInitial("[Options]ExplorerStartOption", 2);
  if (eso == 1) rbes1.checked = true;
  if (eso == 2) rbes2.checked = true;
  if (eso == 3) rbes3.checked = true;
  if (eso == 4) rbes4.checked = true;
  ApplyViews = SetInitial("[Options]ApplyViews", 1);
  ApplyOptions = SetInitial("[Options]ApplyOptions", 1);
}

function SetInitial(DictEntry, Default) {
  var result = getSetting(oSettings, DictEntry);
  if (result == "") result = Default;
  if (IsNumeric(Default)) result = Number(result);
  return result;
}

function FileDialog(Action, Path, Filter, EnableMulti, ReturnMulti) {
  var ret = "";
  Filter = Filter + "|";
  switch (LCase(Action)) {
    case "open":
      ret = window.external.OpenFileDialog(Path, Filter, EnableMulti);
      o = JSON.parse(ret);
      if(o.status!=1) return "";
      if (ReturnMulti) return o.files.join("|");
      return o.files[0];
      break;
    case "save":
      ret = window.external.SaveFileDialog(Path, Filter, EnableMulti);
      o = JSON.parse(ret);
      if(o.status!=1) return "";
      return o.path;
      break;
  }
}

// Load Settings button

function LoadSettings() {
  File = FileDialog("Open", AppData, "*.ini|*.ini", false, false);
  if (File != "") {
    KeepAdvanced = true;
    oSettings = Ini2Dict(File);
    SetLang();
    SetLangIndex()
    UpdateLang(false);
  }
}

// Save Settings button

function SaveSettings() {
  File = FileDialog("Save", AppData + "\\", "*.ini|*.ini", false, false);
  if (File != "") Var2Ini(File);
}

// Restore button

function Restore() {
  File = FileDialog("Open", Backup, "*.reg|*.reg", true, false);
  if (File != "") RunScript(File);
}

// Write vars to INI file

function Var2Ini(INIFile) {
  oFile = oFSO.OpenTextFile(INIFile, ForWriting, true, Ansi);
  oFile.WriteLine("[Options]");
  oFile.WriteLine("ThemeIndex=" + Theme.selectedIndex);
  oFile.WriteLine("Language=" + Language);
  oFile.WriteLine("Font1=" + Font1.options[Font1.selectedIndex].value);
  oFile.WriteLine("Font2=" + Font2.options[Font2.selectedIndex].value);
  oFile.WriteLine("Size1=" + Size1.options[Size1.selectedIndex].value);
  oFile.WriteLine("Size2=" + Size2.options[Size2.selectedIndex].value);
  oFile.WriteLine("Scroll=" + xs.selectedIndex);
  oFile.WriteLine("Interface=" + IFace.selectedIndex);
  oFile.WriteLine("Reset=" + Number(wd.checked));
  oFile.WriteLine("Backup=" + Number(bu.checked));
  oFile.WriteLine("ShowExt=" + Number(se.checked));
  oFile.WriteLine("CompView=" + Number(cv.checked));
  oFile.WriteLine("ShowHidden=" + Number(hf.checked));
  oFile.WriteLine("Generic=" + Number(gn.checked));
  oFile.WriteLine("SearchOnly=" + Number(so.checked));
  oFile.WriteLine("SetVirtualFolders=" + Number(vf.checked));
  oFile.WriteLine("NoSuggestions=" + Number(ns.checked));
  oFile.WriteLine("NoNumericalSort=" + Number(nn.checked));
  oFile.WriteLine("Win10Search=" + Number(ts.checked));
  oFile.WriteLine("Win11Explorer=" + Number(ee.checked));
  oFile.WriteLine("LegacySpacing=" + Number(ls.checked));
  oFile.WriteLine("NoFullRowSelect=" + Number(fr.checked));
  oFile.WriteLine("LegacyDialogFix=" + Number(ld.checked));
  oFile.WriteLine("ExplorerStart=" + Number(es.checked));
  if (rbes1.checked) eso = 1;
  if (rbes2.checked) eso = 2;
  if (rbes3.checked) eso = 3;
  if (rbes4.checked) eso = 4;
  oFile.WriteLine("ExplorerStartOption=" + eso);
  oFile.WriteLine("ExplorerStartPath=" + esi.value);
  oFile.WriteLine("Win10Explorer=" + Number(ex.checked));
  oFile.WriteLine("NoFolderThumbs=" + Number(nf.checked));
  oFile.WriteLine("UnhideAppData=" + Number(ua.checked));
  oFile.WriteLine("UnhidePublicDesktop=" + Number(pd.checked));
  oFile.WriteLine("ClassicSearch=" + Number(sc.checked));
  oFile.WriteLine("HomeGrouping=" + Number(hg.checked));
  oFile.WriteLine("LibraryGrouping=" + Number(lg.checked));
  oFile.WriteLine("ClassicContextMenu=" + Number(cm.checked));
  oFile.WriteLine("CopyMoveInMenu=" + Number(mc.checked));
  oFile.WriteLine("NoSearchInternet=" + Number(si.checked));
  oFile.WriteLine("NoSearchHighlights=" + Number(sh.checked));
  oFile.WriteLine("ThisPCoption=" + Number(tp.checked));
  oFile.WriteLine("ThisPCView=" + tpv.selectedIndex);
  oFile.WriteLine("ThisPCNG=" + Number(tpg.checked));
  oFile.WriteLine("ApplyViews=" + ApplyViews);
  oFile.WriteLine("ApplyOptions=" + ApplyOptions);
  for (i = 0; i <= UBFolderType; i++) {
    oFile.WriteLine("[" + ArrFolderType[i] + "]");
    if (i > 0) {
      oFile.WriteLine("GUID=" + ArrFolderTypeGUID[i]);
      oFile.WriteLine("Include=" + ArrIncludeFlag[i]);
      oFile.WriteLine("Inherit=" + ArrInheritFlag[i]);
    }
    oFile.WriteLine("View=" + document.getElementById(i + "View").selectedIndex);
    oFile.WriteLine("IconSize=" + document.getElementById(i + "IconSize").value);
    oFile.WriteLine("ColumnList=" + ArrColumnLists[i]);
    oFile.WriteLine("GroupBy=" + ArrGroupBy[i]);
    oFile.WriteLine("GroupByOrder=" + ArrGroupByOrder[i]);
    oFile.WriteLine("FileDialogOption=" + ArrFD[i]);
    oFile.WriteLine("FileDialogView=" + ArrFDV[i]);
    oFile.WriteLine("FileDialogNG=" + ArrFDG[i]);
    SortBy = ArrSort1Order[i] + ArrSort1[i];
    if (ArrSort2[i] != "") SortBy += ";" + ArrSort2Order[i] + ArrSort2[i];
    if (ArrSort3[i] != "") SortBy += ";" + ArrSort3Order[i] + ArrSort3[i];
    if (ArrSort4[i] != "") SortBy += ";" + ArrSort4Order[i] + ArrSort4[i];
    oFile.WriteLine("SortBy=" + SortBy);
  }
  oFile.Close();
}

// Script for displaying synchronized views of registry before/after views

function Inspection(i) {
  Key = "\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderTypes\\";
  oWSH.Run("Reg Export HKLM" + Key + ArrFolderTypeGUID[i] + " " + Q + TempFile + Q + " /y", 0, true);
  f = oFSO.OpenTextFile(TempFile, ForReading, false, Unicode);
  Txt1Data = f.ReadAll();
  f.Close();
  Txt1.value = Txt1Data;

  oFSO.DeleteFile(TempFile);
  oWSH.Run("Reg Export HKCU" + Key + ArrFolderTypeGUID[i] + " " + Q + TempFile + Q + " /y", 0, true);
  if (oFSO.FileExists(TempFile)) {
    f = oFSO.OpenTextFile(TempFile, ForReading, false, Unicode);
    Txt2Data = f.ReadAll();
    f.Close();
    Txt2.value = Txt2Data;
  }

  YScrollPos = document.documentElement.scrollTop;
  Pg1.style.display = "none";
  Pg2.style.display = "none";
  UpdateFont2();
  UpdateSize2();
  document.documentElement.style.overflow = "hidden";
  HeadHeight = P3hd.scrollHeight + 50;
  AvailHeight = document.documentElement.clientHeight - HeadHeight;
  y = parseInt(AvailHeight / 2);
  Txt1.style.height = y;
  Txt2.style.height = y;
  window.scrollTo(0, 0);
}

function Modal(Title, Args, DialogTop) {
  var w, t, wx;

  t = Number(LCase(sTheme).indexOf("dark") > 0);
  if (HighContrast) t = 2;

  w = parseInt(document.documentElement.clientWidth);
  wx = parseInt(350 * Scale);
  if (wx < w) w = wx;

  x = window.screenLeft + parseInt(2 * Scale);
  y = DialogTop;

  DialogArgs = Title + ";" + SelectedFont1 + ";" + SelectedSize1 + ";" + Scale + ";" + t + ";" + w + ";" + x + ";" + y + ";" + Args;

  var param = new ClassParam();
  param.param1 = DialogArgs;
  param.param2 = aColor;
  param.param3 = ArrLang[75]; // OK button text

  window.external.CustomDialog("ModalJS.htm", param, w, 100, 0);

  return param.param1;
}

function FTOptions(i) {
  RetVal = Modal(OptIcon, ArrLang[12] + ";" + ArrLang[25] + ";" + ArrView.join("|") + ";" + ArrFD[i] + ";" + ArrFDG[i] + ";" + ArrFDV[i], window.event.clientY);
  if (RetVal != "") {
    TempArray = RetVal.split("|");
    ArrFD[i] = Number(TempArray[0]);
    ArrFDV[i] = Number(TempArray[1]);
    ArrFDG[i] = Number(TempArray[2]);
  }
  UpdateFDView(i);
  InheritUpdate(i);
}

function UpdateFDView(i) {
  if (ArrFD[i] == "1") {
    LParen = "", RParen = "";
    if (ArrFDG[i] == "0") { LParen = "("; RParen = ")" };
    document.getElementById(i + "FTDialogView").style.display = "block";
    document.getElementById(i + "DialogView").innerHTML = LParen + ArrView[ArrFDV[i]] + RParen;
  } else {
    document.getElementById(i + "FTDialogView").style.display = "none";
  }
}

function FTCopy(i) {
  FTCopyIdx = i;
}

function FTPaste(i) {
  if (FTCopyIdx == "") return;
  ArrViewChoice[i] = ArrViewChoice[FTCopyIdx];
  ArrIconSize[i] = ArrIconSize[FTCopyIdx];
  ArrColumnLists[i] = ArrColumnLists[FTCopyIdx];
  ArrGroupBy[i] = ArrGroupBy[FTCopyIdx];
  ArrGroupByOrder[i] = ArrGroupByOrder[FTCopyIdx];
  ArrFD[i] = ArrFD[FTCopyIdx];
  ArrFDV[i] = ArrFDV[FTCopyIdx];
  ArrFDG[i] = ArrFDG[FTCopyIdx];
  ArrSort1[i] = ArrSort1[FTCopyIdx];
  ArrSort1Order[i] = ArrSort1Order[FTCopyIdx];
  ArrSort2[i] = ArrSort2[FTCopyIdx];
  ArrSort2Order[i] = ArrSort2Order[FTCopyIdx];
  ArrSort3[i] = ArrSort3[FTCopyIdx];
  ArrSort3Order[i] = ArrSort3Order[FTCopyIdx];
  ArrSort4[i] = ArrSort4[FTCopyIdx];
  ArrSort4Order[i] = ArrSort4Order[FTCopyIdx];
  document.getElementById(i + "View").selectedIndex = ArrViewChoice[i];
  document.getElementById(i + "IconSize").value = ArrIconSize[i];
  document.getElementById(i + "GroupBy").innerHTML = document.getElementById(FTCopyIdx + "GroupBy").innerHTML;
  document.getElementById(i + "SortBy").innerHTML = document.getElementById(FTCopyIdx + "SortBy").innerHTML;
  document.getElementById(i + "ColShow").innerHTML = document.getElementById(FTCopyIdx + "ColShow").innerHTML;
  UpdateFDView(i);
  InheritUpdate(i);
}

// Display Options page

function FVOptions() {
  YScrollPos = document.documentElement.scrollTop;
  Pg1.style.display = "none";
  Pg4.style.display = "inline";
  OptionLS();
  OptionLSDiv();
  OptionThisPC();
  Sec4.style.marginTop = fix4.scrollHeight - (Scale * 20);
}

function ExpOptions() {
  YScrollPos = document.documentElement.scrollTop;
  Pg1.style.display = "none";
  Pg5.style.display = "inline";
  OptionTS();
  OptionES();
  Sec5.style.marginTop = fix5.scrollHeight - (Scale * 20);
  if (CurBld == 22621 && UBR >= "3007" && UBR < "3085") ees.style.display = "inline";
}

function DetectExpOptions() {
  // WinSetView is compiled 32 bit so that it runs on all systems without having to make separate 32 and 64 bit exes.
  // We use CSReg.exe (.Net app set to prefer 64 bit) to read CLSID entries without being redirected to the 32 bit key.
  // Reg.exe with the /reg:64 argument would also work, but not when the RegistryToolsDisabled policy is enabled.
  var csregQuery, csregReg, AdvKey;
  csregQuery = '"' + PartsDir + 'CSReg.exe" query ';
  csregReg = "HKCU\\Software\\CSReg\\RetVal";
  AdvKey = "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\";
  
  if (Win11) {
    try {cv.checked = oWSH.RegRead(AdvKey + "UseCompactMode") == 1;} catch (e) {}
    try {oWSH.Run(csregQuery + "HKCU\\Software\\Classes\\CLSID\\{86CA1AA0-34AA-4E8B-A509-50C905BAE2A2}\\InprocServer32 /ve", 0, true);} catch (e) {}
    try {cm.checked = !oWSH.RegRead(csregReg);} catch (e) {}
    try {oWSH.Run(csregQuery + "HKCU\\Software\\Classes\\CLSID\\{2aa9162e-c906-4dd9-ad0b-3d24a8eef5a0} /ve", 0, true);} catch (e) {}
    try {ex.checked = !oWSH.RegRead(csregReg);} catch (e) {}
  }
  try {se.checked = oWSH.RegRead(AdvKey + "HideFileExt") == 0;} catch (e) {}
  try {hf.checked = oWSH.RegRead(AdvKey + "Hidden") == 1;} catch (e) {}
  mc.checked = false;
  try {mc.checked = oWSH.RegRead("HKCU\\Software\\Classes\\AllFileSystemObjects\\shellex\\ContextMenuHandlers\\{C2FBB630-2971-11D1-A18C-00C04FD75D13}\\") == "";} catch (e) {}
  try {mc.checked = oWSH.RegRead("HKCU\\Software\\Classes\\AllFileSystemObjects\\shellex\\ContextMenuHandlers\\{C2FBB631-2971-11D1-A18C-00C04FD75D13}\\") == "";} catch (e) {}
  si.checked = false;
  try {si.checked = oWSH.RegRead("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Search\\BingSearchEnabled") == 0;} catch (e) {}
  sh.checked = false;
  try {sh.checked = oWSH.RegRead("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\SearchSettings\\IsDynamicSearchBoxEnabled") == 0;} catch (e) {}
  try {sh.checked = oWSH.RegRead("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Feeds\\DSB\\ShowDynamicContent") == 0;} catch (e) {}
  nf.checked = false;
  try {nf.checked = LCase(oWSH.RegRead("HKCU\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\Bags\\AllFolders\\Shell\\Logo")) == "none";} catch (e) {}
  try {oFolder = oFSO.GetFolder(oWSH.ExpandEnvironmentStrings("%UserProfile%") + "\\AppData");} catch (e) {}
  try {ua.checked = (oFolder.Attributes & 2) == 0;} catch (e) {}
  try {oFolder = oFSO.GetFolder("C:\\Users\\Public\\Desktop");} catch (e) {}
  try {pd.checked = (oFolder.Attributes & 2) == 0;} catch (e) {}
  ns.checked = false;
  try {ns.checked = oWSH.RegRead("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\UserProfileEngagement\\ScoobeSystemSettingEnabled") == 0;} catch (e) {}
  try {ns.checked = oWSH.RegRead("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager\\ScoobeSystemSettingEnabled") == 0;} catch (e) {}
  nn.checked = false;
  try {nn.checked = oWSH.RegRead("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\NoStrCmpLogical") == 1;} catch (e) {}
  try {nn.checked = oWSH.RegRead("HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\NoStrCmpLogical") == 1;} catch (e) {}
  ts.checked = false;
  try {ts.checked = oWSH.RegRead("HKLM\\System\\CurrentControlSet\\Control\\FeatureManagement\\Overrides\\8\\1144177291\\EnabledState") == 2;} catch (e) {}
  if (ts.checked) {
    try {oWSH.Run(csregQuery + "HKCU\\Software\\Classes\\CLSID\\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\\TreatAs /ve", 0, true);} catch (e) {}
    try {sc.checked = !oWSH.RegRead(csregReg);} catch (e) {}
  }
  OptionTS();
  ld.checked = false;
  try {ld.checked = oWSH.RegRead("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\ComDlg32\\PlacesBar\\") == "";} catch (e) {}
  if (WinVer == "7" || WinVer == "8") {
    es.checked = false;
  } else {
    es.checked = true;
    var ePath = "";
    try {oWSH.Run(csregQuery + "HKCU\\Software\\Classes\\CLSID\\{52205fd8-5dfb-447d-801a-d0b52f2e83e1}\\shell\\OpenNewWindow\\command /ve", 0, true);} catch (e) {}
    try {ePath = oWSH.RegRead(csregReg);} catch (e) {}
    if (ePath != "") {
      rbes4.checked = true;
      esi.value = Replace(ePath.substr(ePath.indexOf(" ") + 1), String.fromCharCode(34), "");
    } else {
      try {launchTo = oWSH.RegRead(AdvKey + "LaunchTo");} catch (e) {}
      if (launchTo == 4) {
        rbes2.checked = true;
      } else {
        rbes1.checked = launchTo == 1;
        rbes2.checked = launchTo == 2;
        rbes3.checked = launchTo == 3;
      }
    }
  }
  OptionES();
}

function Arrange() {
  GenColShow();
  TempArray = ColShowLabels.split("|");
  DialogTop = window.screenTop + parseInt(fix2.scrollHeight - (Scale * 60));
  RetVal = Modal(ArrLang[36], ColShowLabels, DialogTop);
  if (RetVal == "") return;
  TempArray = RetVal.split("|");
  for (j = 0; j < TempArray.length; j++) {
    id = ArrData[TempArray[j]].split(";")[4];
    document.getElementById("N~" + id).value = j;
  }
  GenColShow();
  if (document.getElementById("N~ItemNameDisplay").value != "0") {
    RetVal = Modal(Warning, ArrLang[43], DialogTop);
  }
}

// Save settings and run WinSetView.ps1

function Submit() {
  var Reset = "0";
  if (wd.checked) Reset = "1";
  DialogArgs = ArrLang[73] + ";" + ArrLang[74] + ";" + ApplyViews + ";" + ApplyOptions + ";" + ArrLang[2] + ";" + Reset;
  DialogTop = window.screenTop + parseInt(fix1.scrollHeight - (Scale * 80));
  RetVal = Modal("🚀", DialogArgs, DialogTop);
  if (RetVal == "") return;
  var aRetVal = RetVal.split("|");
  if (aRetVal[0] == "0" && aRetVal[1] == "0") return;
  ApplyViews = aRetVal[0];
  ApplyOptions = aRetVal[1];
  altKey = aRetVal[2] == "1";
  Var2Ini(INIFile);
  RunScript(INIFile);
}

// Run WinSetView.ps1 with supplied parameter (INI or REG filename)

function RunScript(Param) {
  x = "";
  if (Param.slice(-3) == "ini" && altKey) x = "-NoExit";
  CmdLine = PSExe + " " + x + " -NoLogo -NoProfile -ExecutionPolicy Bypass -File .\\WinSetView.ps1 " + String.fromCharCode(34) + Param + String.fromCharCode(34);
  oWSH.Run(CmdLine, 1, false);
  Quit();
}

// Set values for column selection page

function SelectColumns(i) {
  FTindex = i;

  // These two lines added June 2023 to disable Sort 4
  ArrSort4[FTindex] = "";
  cbs4.style.display = "none";

  // Reset everything
  for (i = 0; i <= ArrColData.length - 1; i++) {
    if (ArrColData[i] != "") {
      ArrColDataItem = ArrColData[i].split(";");
      C1 = ArrColDataItem[1];
      C2 = ArrColDataItem[0];
      Pidx = "P~" + C1;
      Widx = "W~" + C1;
      Nidx = "N~" + C1;
      Gidx = "G~" + C1;
      S1idx = "S1~" + C1;
      S2idx = "S2~" + C1;
      S3idx = "S3~" + C1;
      S4idx = "S4~" + C1;
      Midx = "M~" + C1;
      document.getElementById(Nidx).value = "";
      document.getElementById(Widx).value = "";
      if (C1 == "ItemNameDisplay") {
        document.getElementById(Pidx).checked = true;
        document.getElementById(Midx).checked = true;
        document.getElementById(Pidx).disabled = true;
        document.getElementById(Midx).disabled = true;
      } else {
        document.getElementById(Pidx).checked = false;
        document.getElementById(Midx).checked = false;
      }
      if (ArrGroupBy[FTindex] == "") {
        GroupBy[i].style.visibility = "hidden";
        document.getElementById(Gidx).checked = false;
      } else {
        GroupBy[i].style.visibility = "visible";
        if (ArrGroupBy[FTindex] == C1) document.getElementById(Gidx).checked = true;
      }
      if (ArrSort1[FTindex] == C1) document.getElementById(S1idx).checked = true;
      if (ArrSort2[FTindex] == "") {
        RBS2[i].style.visibility = "hidden";
        document.getElementById(S2idx).checked = false;
      } else {
        RBS2[i].style.visibility = "visible";
        if (ArrSort2[FTindex] == C1) document.getElementById(S2idx).checked = true;
      }
      if (ArrSort3[FTindex] == "") {
        RBS3[i].style.visibility = "hidden";
        document.getElementById(S3idx).checked = false;
      } else {
        RBS3[i].style.visibility = "visible";
        if (ArrSort3[FTindex] == C1) document.getElementById(S3idx).checked = true;
      }
      if (ArrSort4[FTindex] == "") {
        RBS4[i].style.visibility = "hidden";
        document.getElementById(S4idx).checked = false;
      } else {
        RBS4[i].style.visibility = "visible";
        if (ArrSort4[FTindex] == C1) document.getElementById(S4idx).checked = true;
      }
    }
  }

  if (ArrGroupBy[FTindex] == "") {
    cbg.value = "X";
  } else {
    cbg.value = ArrGroupByOrder[FTindex] == "+" ? GrpUpArrow : GrpDnArrow;
  }

  cbs1.value = ArrSort1Order[FTindex] == "+" ? UpArrow : DnArrow;
  cbs2.value = ArrSort2Order[FTindex] == "+" ? UpArrow : DnArrow;
  cbs3.value = ArrSort3Order[FTindex] == "+" ? UpArrow : DnArrow;
  cbs4.value = ArrSort4Order[FTindex] == "+" ? UpArrow : DnArrow;

  if (ArrSort2[FTindex] == "") cbs2.value = "X";
  if (ArrSort3[FTindex] == "") cbs3.value = "X";
  if (ArrSort4[FTindex] == "") cbs4.value = "X";

  ArrColumnList = ArrColumnLists[FTindex].split(";");

  Order = 0;
  for (i = 0; i <= ArrColumnList.length - 1; i++) {
    ArrColumnEntry = ArrColumnList[i].split(",");
    C1 = ArrColumnEntry[2];
    Pidx = "P~" + C1;
    Widx = "W~" + C1;
    Nidx = "N~" + C1;
    Midx = "M~" + C1;
    Show = ArrColumnEntry[0];
    try { document.getElementById(Pidx).checked = true; } catch (e) {}
    if (Show == "0") {
      try { document.getElementById(Nidx).value = Order; } catch (e) {}
      try { document.getElementById(Midx).checked = true; } catch (e) {}
    }
    try { document.getElementById(Widx).value = ArrColumnEntry[1]; } catch (e) {}
    Order++;
  }

  CheckCount = i;
  cs.innerHTML = document.getElementById(FTindex + "ColShow").innerHTML;
  SetColShowColor();
  P2tt.innerHTML = ArrFolderTypeLang[FTindex];

  tab2.style.lineHeight = parseInt(Scale * 10) + "pt";

  YScrollPos = document.documentElement.scrollTop;
  Pg1.style.display = "none";
  Pg2.style.display = "inline";
  Pg3.style.display = "none";
  tcin.style.marginTop = fix2.scrollHeight - parseInt(Scale * 20);
  window.scrollTo(0, 0);
}

// Generate column heading list with click order data included

function GenColShow() {
  j = -1;
  for (i = 0; i <= ArrColData.length - 1; i++) {
    if (ArrColData[i] != "") {
      ArrColDataItem = ArrColData[i].split(";");
      C1 = ArrColDataItem[1];
      C2 = ArrColDataItem[0];
      Pidx = "P~" + C1;
      Widx = "W~" + C1;
      Nidx = "N~" + C1;
      Show = "";
      sOrder = "";
      sOrder = document.getElementById(Nidx).value;
      if (sOrder != "") {
        Show = "0";
      } else {
        if (document.getElementById(Pidx).checked) Show = "1";
      }
      if (Show != "") {
        ColWid = document.getElementById(Widx).value;
        j++;
        ArrData[j] = Show + ";" + ("000" + sOrder).slice(-3) + ";" + ColWid + ";" + ArrColData[i];
      }
    }
  }

  LastColSel = j;

  // Sort list
  
  x = LastColSel - 1;
  for (i = x; i >= 0; i--) {
    for (j = 0; j <= i; j++) {
      if (ArrData[j] > ArrData[j + 1]) {
        y = ArrData[j + 1];
        ArrData[j + 1] = ArrData[j];
        ArrData[j] = y;
      }
    }
  }

  // Create list to be displayed
  
  Data = "";
  ColShow = "";
  ColShowLabels = "";
  for (i = 0; i <= LastColSel; i++) {
    ArrColumnEntry = ArrData[i].split(";");
    if (Data != "") Data = Data + ";";
    Data = Data + ArrColumnEntry[0] + "," + ArrColumnEntry[2] + "," + ArrColumnEntry[4];
    if (ArrColumnEntry[0] == "0") {
      if (ColShow != "") ColShow = ColShow + " | ";
      if (ColShowLabels != "") ColShowLabels = ColShowLabels + "|";
      ColShowColor(ArrColumnEntry[4]);
      ColShow = ColShow + "<span class=" + x + ">" + ArrColumnEntry[3] + "</span>";
      ColShowLabels = ColShowLabels + ArrColumnEntry[3];
    }
  }

  // Display column heading list
  cs.innerHTML = ColShow;
  SetColShowColor();
}

// Return values from column selection page

function P2Exit() {
  GenColShow();

  ArrColumnLists[FTindex] = Data;
  document.getElementById(FTindex + "ColShow").innerHTML = ColShow;
  SetColShowColor();

  if (cbg.value == "X") ArrGroupBy[FTindex] = "";
  if (ArrGroupBy[FTindex] == "") {
    document.getElementById(FTindex + "GroupBy").innerHTML = ArrView[9]; // None
  } else {
    try { document.getElementById(FTindex + "GroupBy").innerHTML = ArrGroupByOrder[FTindex] + document.getElementById("L~" + ArrGroupBy[FTindex]).value; } catch (e) {}
  }

  if (cbs2.value == "X") ArrSort2[FTindex] = "";
  if (cbs3.value == "X") ArrSort3[FTindex] = "";
  if (cbs4.value == "X") ArrSort4[FTindex] = "";

  try { SortBy = ArrSort1Order[FTindex] + document.getElementById("L~" + ArrSort1[FTindex]).value; } catch (e) {}
  try { if (ArrSort2[FTindex] != "") SortBy += ", " + ArrSort2Order[FTindex] + document.getElementById("L~" + ArrSort2[FTindex]).value; } catch (e) {}
  try { if (ArrSort3[FTindex] != "") SortBy += ", " + ArrSort3Order[FTindex] + document.getElementById("L~" + ArrSort3[FTindex]).value; } catch (e) {}
  try { if (ArrSort4[FTindex] != "") SortBy += ", " + ArrSort4Order[FTindex] + document.getElementById("L~" + ArrSort4[FTindex]).value; } catch (e) {}
  document.getElementById(FTindex + "SortBy").innerHTML = SortBy;

  InheritUpdate(i);

  Back2Pg1();
}

// Return to main page

function Back2Pg1() {
  Pg5.style.display = "none";
  Pg4.style.display = "none";
  Pg3.style.display = "none";
  Pg2.style.display = "none";
  Pg1.style.display = "inline";
  document.documentElement.style.overflow = "auto";
  window.scrollTo(0, YScrollPos);
}

// Event handlers for main page

function OptionReset() {
  if (wd.checked) {
    FTHide = true;
    Sec1.style.visibility = "hidden";
    ob.style.display = "none";
    lb.style.visibility = "hidden";
    sb.style.visibility = "hidden";
  } else {
    FTHide = false;
    Sec1.style.visibility = "visible";
    ob.style.display = "inline";
    if (IFace.selectedIndex == 2) {
      lb.style.visibility = "visible";
      sb.style.visibility = "visible";
    }
  }
  for (i = 1; i <= UBFolderType; i++) {
    FTHideUnHide(i, FTHide);
  }
}

function OptionSearchOnly() {
  oElements = document.getElementsByTagName("span");
  x = "";
  if (HighContrast) x += "HC";
  for (i = 0; i < oElements.length; i++) {
    oElement = oElements[i];
    if (oElement.className == "X3" + x) {
      oElement.className = "X4" + x;
    } else {
      if (oElement.className == "X4" + x) oElement.className = "X3" + x;
    }
  }
  SetColShowColor();
}

function OptionTS() {
  tss.style.display = ts.checked ? "inline" : "none";
}

function OptionLS() {
  lss.style.display = ls.checked ? "inline" : "none";
}

function OptionLSDiv() {
  if (DarkMode) {
    LSDiv.style.display = "none";
    lss.style.display = "none";
  }
}

function OptionES() {
  if (es.checked) {
    esd.style.display = "inline";
    esd2.style.display = rbes4.checked ? "inline" : "none";
  } else {
    esd.style.display = "none";
    esd2.style.display = "none";
  }
}

function OptionThisPC() {
  otp.style.display = tp.checked ? "block" : "none";
}

function IconSizeUpdate(i) {
  ArrIconSize[i] = "";

  switch (ArrViewChoice[i]) {
    case "5":
      ArrIconSize[i] = "16";
      break;
    case "6":
      ArrIconSize[i] = "48";
      break;
    case "7":
      ArrIconSize[i] = "96";
      break;
    case "8":
      ArrIconSize[i] = "256";
      break;
  }

  o = document.getElementById(i + "IconSize");
  o.value = ArrIconSize[i];
  if (ArrIconSize[i] == "") {
    o.disabled = true;
    o.style.backgroundColor = getSetting(oThemes, sTheme + "InputDisabledBackground");
  } else {
    o.disabled = false;
    o.style.backgroundColor = getSetting(oThemes, sTheme + "InputBackground");
  }
}

function ViewChange(i) {
  ArrViewChoice[i] = document.getElementById(i + "View").value;
  IconSizeUpdate(i);
  InheritUpdate(i);
}

function IconSizeChange(i) {
  ArrIconSize[i] = document.getElementById(i + "IconSize").value;
  InheritUpdate(i);
}

function InheritChange(i) {
  ArrInheritFlag[i] = Number(document.getElementById(i + "Inherit").checked);
  if (ArrInheritFlag[i] == "1") {
    document.getElementById(i + "FTcontrols").style.display = "none";
    document.getElementById(i + "FTView").style.display = "block";
  } else {
    document.getElementById(i + "FTcontrols").style.display = "block";
    document.getElementById(i + "FTView").style.display = "none";
  }
  InheritUpdate(i);
}

// Update inheritance for folder types
function InheritUpdate(i) {
  for (i = 1; i <= UBFolderType; i++) {
    if (document.getElementById(i + "Inherit").checked) {
      ArrViewChoice[i] = ArrViewChoice[ArrInherit[i]];
      ArrIconSize[i] = ArrIconSize[ArrInherit[i]];
      ArrColumnLists[i] = ArrColumnLists[ArrInherit[i]];
      ArrGroupBy[i] = ArrGroupBy[ArrInherit[i]];
      ArrGroupByOrder[i] = ArrGroupByOrder[ArrInherit[i]];
      ArrFD[i] = ArrFD[ArrInherit[i]];
      ArrFDV[i] = ArrFDV[ArrInherit[i]];
      ArrFDG[i] = ArrFDG[ArrInherit[i]];
      ArrSort1[i] = ArrSort1[ArrInherit[i]];
      ArrSort1Order[i] = ArrSort1Order[ArrInherit[i]];
      ArrSort2[i] = ArrSort2[ArrInherit[i]];
      ArrSort2Order[i] = ArrSort2Order[ArrInherit[i]];
      ArrSort3[i] = ArrSort3[ArrInherit[i]];
      ArrSort3Order[i] = ArrSort3Order[ArrInherit[i]];
      ArrSort4[i] = ArrSort4[ArrInherit[i]];
      ArrSort4Order[i] = ArrSort4Order[ArrInherit[i]];

      document.getElementById(i + "View").selectedIndex = ArrViewChoice[i];
      document.getElementById(i + "IconSize").value = ArrIconSize[i];
      x = ArrIconSize[i] == "" ? "" : " [" + ArrIconSize[i] + "]";
      document.getElementById(i + "FTView").innerHTML = ArrView[0] + ": " + ArrView[ArrViewChoice[i]] + x;
      document.getElementById(i + "GroupBy").innerHTML = document.getElementById(ArrInherit[i] + "GroupBy").innerHTML;
      document.getElementById(i + "SortBy").innerHTML = document.getElementById(ArrInherit[i] + "SortBy").innerHTML;
      document.getElementById(i + "ColShow").innerHTML = document.getElementById(ArrInherit[i] + "ColShow").innerHTML;

      UpdateFDView(i);
    }
  }
}

function IncludeChange(i) {
  ArrIncludeFlag[i] = Number(document.getElementById(i + "Include").checked);
  FTHideUnHide(i, false);
  InheritUpdate(i);
}

function IncludeAll() {
  for (i = 1; i <= UBFolderType; i++) {
    ArrIncludeFlag[i] = Number(ica.checked);
    FTHideUnHide(i, false);
    InheritUpdate(i);
  }
}

// Event handlers for column selection page buttons

function GroupByClick() {
  x = cbg.value;
  switch (x) {
    case GrpUpArrow:
      cbg.value = GrpDnArrow;
      ArrGroupByOrder[FTindex] = "-";
      break;
    case GrpDnArrow:
      cbg.value = "X";
      for (i = 0; i <= ArrColData.length - 1; i++) {
        GroupBy[i].style.visibility = "hidden";
      }
      break;
    case "X":
      cbg.value = GrpUpArrow;
      ArrGroupByOrder[FTindex] = "+";
      for (i = 0; i <= ArrColData.length - 1; i++) {
        GroupBy[i].style.visibility = "visible";
      }
      break;
  }
}

function SortBy1Click() {
  if (cbs1.value == UpArrow) {
    cbs1.value = DnArrow;
    ArrSort1Order[FTindex] = "-";
  } else {
    cbs1.value = UpArrow;
    ArrSort1Order[FTindex] = "+";
  }
}

function SortBy2Click() {
  x = cbs2.value;
  switch (x) {
    case UpArrow:
      cbs2.value = DnArrow;
      ArrSort2Order[FTindex] = "-";
      break;
    case DnArrow:
      cbs2.value = "X";
      ArrSort2Order[FTindex] = "+";
      for (i = 0; i <= ArrColData.length - 1; i++) {
        RBS2[i].style.visibility = "hidden";
      }
      break;
    case "X":
      cbs2.value = UpArrow;
      ArrSort2Order[FTindex] = "+";
      for (i = 0; i <= ArrColData.length - 1; i++) {
        RBS2[i].style.visibility = "visible";
      }
      break;
  }
}

function SortBy3Click() {
  x = cbs3.value;
  switch (x) {
    case UpArrow:
      cbs3.value = DnArrow;
      ArrSort3Order[FTindex] = "-";
      break;
    case DnArrow:
      cbs3.value = "X";
      ArrSort3Order[FTindex] = "+";
      for (i = 0; i <= ArrColData.length - 1; i++) {
        RBS3[i].style.visibility = "hidden";
      }
      break;
    case "X":
      cbs3.value = UpArrow;
      ArrSort3Order[FTindex] = "+";
      for (i = 0; i <= ArrColData.length - 1; i++) {
        RBS3[i].style.visibility = "visible";
      }
      break;
  }
}

function SortBy4Click() {
  x = cbs4.value;
  switch (x) {
    case UpArrow:
      cbs4.value = DnArrow;
      ArrSort4Order[FTindex] = "-";
      break;
    case DnArrow:
      cbs4.value = "X";
      ArrSort4Order[FTindex] = "+";
      for (i = 0; i <= ArrColData.length - 1; i++) {
        RBS4[i].style.visibility = "hidden";
      }
      break;
    case "X":
      cbs4.value = UpArrow;
      ArrSort4Order[FTindex] = "+";
      for (i = 0; i <= ArrColData.length - 1; i++) {
        RBS4[i].style.visibility = "visible";
      }
      break;
  }
}

// Event handlers for column (property) selection page items:
// The id is the property name

function CBMClick(id) {
  if (document.getElementById("M~" + id).checked) {
    if (!document.getElementById("P~" + id).checked) {
      if (CheckCount == 21) {
        document.getElementById("M~" + id).checked = false;
        MsgBox("☑ > 21", vbCritical);
        return;
      } else {
        document.getElementById("P~" + id).checked = true;
        CheckCount++;
      }
    }
    Order++;
    document.getElementById("N~" + id).value = Order;
  } else {
    document.getElementById("N~" + id).value = "";
  }
  GenColShow();
}

function CBPClick(id) {
  if (document.getElementById("P~" + id).checked) {
    if (CheckCount == 21) {
      document.getElementById("P~" + id).checked = false;
      MsgBox("☑ > 21", vbCritical);
      return;
    } else {
      CheckCount++;
    }
  } else {
    CheckCount--;
    if (document.getElementById("M~" + id).checked) {
      document.getElementById("M~" + id).checked = false;
      document.getElementById("N~" + id).value = "";
      GenColShow();
    }
  }
}

function RBGClick(id) {
  ArrGroupBy[FTindex] = document.getElementById("G~" + id).value;
}

function RBS1Click(id) {
  ArrSort1[FTindex] = document.getElementById("S1~" + id).value;
}

function RBS2Click(id) {
  ArrSort2[FTindex] = document.getElementById("S2~" + id).value;
}

function RBS3Click(id) {
  ArrSort3[FTindex] = document.getElementById("S3~" + id).value;
}

function RBS4Click(id) {
  ArrSort4[FTindex] = document.getElementById("S4~" + id).value;
}

function WidthClick() {
  DialogTop = window.event.clientY - parseInt(Scale * 25);
  if (Modal(LRArrow, ArrLang[26], DialogTop) == "1") {
    for (i = 0; i <= ArrColData.length - 1; i++) {
      if (ArrColData[i] != "") {
        ArrColDataItem = ArrColData[i].split(";");
        Widx = "W~" + ArrColDataItem[1];
        document.getElementById(Widx).value = "";
      }
    }
  }
}

function View1Click() {
  DialogTop = window.event.clientY - parseInt(Scale * 25);
  if (Modal(DetailsIcon, ArrLang[26], DialogTop) == "1") {
    for (i = 0; i <= ArrColData.length - 1; i++) {
      if (ArrColData[i] != "") {
        ArrColDataItem = ArrColData[i].split(";");
        C1 = ArrColDataItem[1];
        Pidx = "P~" + C1;
        Midx = "M~" + C1;
        Nidx = "N~" + C1;
        if (C1 != "ItemNameDisplay" && document.getElementById(Midx).checked == true) {
          document.getElementById(Midx).checked = false;
          document.getElementById(Nidx).value = "";
        }
      }
    }
    cs.innerHTML = ArrColData[0].split(";")[0];
  }
}

function View2Click() {
  var ClearAll = false;
  DialogTop = window.event.clientY - parseInt(Scale * 25);
  if (Modal(RightClickIcon, ArrLang[26], DialogTop) == "1") {
    if (window.event.altKey) ClearAll = true;
    for (i = 0; i < ArrColData.length; i++) {
      if (ArrColData[i] != "") {
        ArrColDataItem = ArrColData[i].split(";");
        C1 = ArrColDataItem[1];
        Pidx = "P~" + C1;
        Midx = "M~" + C1;
        Nidx = "N~" + C1;
        if (C1 != "ItemNameDisplay") {
          if (ClearAll) {
            document.getElementById(Pidx).checked = false;
            document.getElementById(Midx).checked = false;
            document.getElementById(Nidx).value = "";
          } else {
            if (!document.getElementById(Midx).checked) {
              if (document.getElementById(Pidx).checked) {
                document.getElementById(Pidx).checked = false;
                CheckCount--;
              }
            }
          }
        }
      }
    }
    if (ClearAll) {
      cs.innerHTML = ArrColData[0].split(";")[0];
      CheckCount = 1;
    }
  }
}

function Txt1Scroll() {
  Txt2.scrollTop = Txt1.scrollTop;
  Txt2.scrollLeft = Txt1.scrollLeft;
}

function Txt2Scroll() {
  Txt1.scrollTop = Txt2.scrollTop;
  Txt1.scrollLeft = Txt2.scrollLeft;
}

// Set page elements to selected font and size

function UpdateFont1() {
  SelectedFont1 = Font1.options[Font1.selectedIndex].value;
  SelectedSize1 = Size1.options[Size1.selectedIndex].value;
  Scale = (SelectedSize1 / 10) * BaseScale;

  document.body.style.fontFamily = SelectedFont1;
  document.body.style.fontSize = SelectedSize1 + "pt";

  oElements = document.getElementsByTagName("input");
  for (i = 0; i < oElements.length; i++) {
    oElement = oElements[i];
    if (oElement.type == "button" || oElement.type == "text") {
      if (oElement.className != "icon") oElement.style.fontFamily = SelectedFont1;
      oElement.style.fontSize = SelectedSize1 + "pt";
    }
    if (oElement.type == "checkbox" || oElement.type == "radio") {
      oElement.style.zoom = Scale;
    }
  }

  BkP2.style.fontFamily = "WingDings";
  BkP3.style.fontFamily = "WingDings";
  BkP4.style.fontFamily = "WingDings";
  BkP5.style.fontFamily = "WingDings";

  oElements = document.getElementsByTagName("select");
  for (i = 0; i < oElements.length; i++) {
    oElement = oElements[i];
    oElement.style.fontFamily = SelectedFont1;
    oElement.style.fontSize = SelectedSize1 + "pt";
  }

  UpdateRequiredWidth();

  UpdateCheck();

  Recenter();

  Sec1.style.marginTop = fix1.scrollHeight;

  // Refresh page
  Pg1.style.display = "none";
  Pg1.style.display = "inline";
}

function RecenterButton() {
  WinSizePos = "";
  Recenter();
}

// Resize and position window
function Recenter() {
  if (WinSizePos == "") {
    self.resizeTo(RequiredWidth, screen.availHeight);
    self.moveTo((screen.availWidth - RequiredWidth) / 2, TaskbarAdjust(4));
  }
}

function UpdateFont2() {
  SelectedFont2 = Font2.options[Font2.selectedIndex].value;
  Txt1.style.fontFamily = SelectedFont2;
  Txt2.style.fontFamily = SelectedFont2;
  Pg3.style.display = "none";
  Pg3.style.display = "inline";
}

function UpdateSize2() {
  SelectedSize2 = Size2.options[Size2.selectedIndex].value;
  Txt1.innerText = "";
  Txt2.innerText = "";
  Txt1.value = Txt1Data;
  Txt2.value = Txt2Data;
  Txt1.style.fontSize = SelectedSize2 + "pt";
  Txt2.style.fontSize = SelectedSize2 + "pt";
  Pg3.style.display = "none";
  Pg3.style.display = "inline";
}

// Change width of display columns class based on 1-9 value selected in dropdown menu.
// This effectively goes from no horizontal scroll bar (1=100%) up to 900% to allow
// column heading list to wrap or be displayed on a single line, even if a large number
// of column headings are selected.

function xschange() {
  x = xs.selectedIndex;
  v = x == 1 ? "" : parseInt(RequiredWidth * x);
  oElements = document.getElementsByTagName("div");
  for (i = 0; i < oElements.length; i++) {
    oElement = oElements[i];
    if (oElement.className == "cta") oElement.style.width = v;
  }
  xs.blur();
}

function ShowC1(id) {
  document.getElementById("V~" + id).innerHTML = id;
}

function ShowC2(id, ftname) {
  document.getElementById("V~" + id).innerHTML = Replace(ftname, "`", "'");
}

function PixelInput(id) {
  if (!window.event.altKey) return;
  a = document.getElementById("W~" + id).value;
  b = "";
  if (IsNumeric(a)) b = parseInt(BaseScale * 8 * a);
  b = Modal(LRArrow + ".", ArrLang[28] + ";" + b, window.event.clientY - parseInt(Scale * 50));

  if (!IsNumeric(b)) b = ""

  if (b != "") {
    b = Number(b);
    c = parseInt(b / BaseScale / 8);
    if (c > 999) c = 999;
    if (c < 1) c = 1;
    document.getElementById("W~" + id).value = c;
  }
}

function SetInterface() {
  if (IFace.selectedIndex == 1) {
    lb.style.visibility = "hidden";
    sb.style.visibility = "hidden";
    ica.style.display = "none";
    for (i = 1; i <= UBFolderType; i++) {
      document.getElementById(i + "Inspect").style.display = "none";
    }
  } else {
    if (!wd.checked) {
      lb.style.visibility = "visible";
      sb.style.visibility = "visible";
      ica.style.display = "inline";
      for (i = 1; i <= UBFolderType; i++) {
        if (ArrIncludeFlag[i] == "1") document.getElementById(i + "Inspect").style.display = "inline";
      }
    }
  }
  IFace.blur();
}

function SetTheme() {
  if (ArrThemes.length == 0) return;
  sTheme = "[" + ArrThemes[Theme.selectedIndex - 1] + "]";

  // Colors also used in modal dialogs
  aColor[0] = getSetting(oThemes, sTheme + "MainText");
  aColor[1] = getSetting(oThemes, sTheme + "MainBackground");
  aColor[2] = getSetting(oThemes, sTheme + "ButtonBackground");

  document.body.style.color = getSetting(oThemes, sTheme + "MainText");
  document.body.style.backgroundColor = getSetting(oThemes, sTheme + "MainBackground");
  fix1.style.backgroundColor = getSetting(oThemes, sTheme + "MainBackground");
  fix2.style.backgroundColor = getSetting(oThemes, sTheme + "MainBackground");
  fix4.style.backgroundColor = getSetting(oThemes, sTheme + "MainBackground");
  fix5.style.backgroundColor = getSetting(oThemes, sTheme + "MainBackground");
  Txt1.style.color = getSetting(oThemes, sTheme + "InspectText");
  Txt1.style.backgroundColor = getSetting(oThemes, sTheme + "InspectBackground");
  Txt2.style.color = getSetting(oThemes, sTheme + "InspectText");
  Txt2.style.backgroundColor = getSetting(oThemes, sTheme + "InspectBackground");
  SetColShowColor();
  oElements = document.getElementsByTagName("select");
  for (i = 0; i < oElements.length; i++) {
    oElement = oElements[i];
    oElement.style.color = getSetting(oThemes, sTheme + "SelectText");
    oElement.style.backgroundColor = getSetting(oThemes, sTheme + "SelectBackground");
    oElement.style.borderColor = getSetting(oThemes, sTheme + "SelectBorder");
  }
  oElements = document.getElementsByTagName("input");
  for (i = 0; i < oElements.length; i++) {
    oElement = oElements[i];
    if (oElement.type == "button") {
      oElement.style.color = getSetting(oThemes, sTheme + "ButtonText");
      oElement.style.backgroundColor = getSetting(oThemes, sTheme + "ButtonBackground");
      oElement.style.borderColor = getSetting(oThemes, sTheme + "ButtonBorder");
    }
    if (oElement.type == "text") {
      oElement.style.color = getSetting(oThemes, sTheme + "InputText");
      oElement.style.borderColor = getSetting(oThemes, sTheme + "InputBorder");
      if (oElement.disabled == true) {
        oElement.style.backgroundColor = getSetting(oThemes, sTheme + "InputDisabledBackground");
      } else {
        oElement.style.backgroundColor = getSetting(oThemes, sTheme + "InputBackground");
      }
    }
  }
  Theme.blur();
}

function SetColShowColor() {
  oElements = document.getElementsByTagName("span");
  for (i = 0; i < oElements.length; i++) {
    oElement = oElements[i];
    if (oElement.className == "X1") oElement.style.color = getSetting(oThemes, sTheme + "MainText");
    if (oElement.className == "X2") oElement.style.color = getSetting(oThemes, sTheme + "SearchPropText");
    if (oElement.className == "X3") oElement.style.color = getSetting(oThemes, sTheme + "MainText");
    if (oElement.className == "X4") oElement.style.color = getSetting(oThemes, sTheme + "SearchPropText");
  }
}

function Help(URL) {
  if (NewerAvailable && URL == "https://lesferch.github.io/WinSetView/#how-to-use") {
    URL = "https://lesferch.github.io/WinSetView/";
  }
  try {
    oWSH.Run(URL);
  } catch (e) {
    MsgBox("An error occurred attempting to open" + Z + Z + URL);
  }
}

// HTML interface starts here with the script-generated pages

function BuildPages() {

  // Build page of Folder Types
  for (i = 0; i <= UBFolderType; i++) {
    var Xinc = "", Xcop = "", Xpas = "", Xln2 = "", Xvue = "";
    if (i > 0) {
      Xinc = "<input type=checkbox id=" + i + "Include onclick=IncludeChange(" + i + ") Checked>";
      Xcop = "<div class=tip><input type=button class=icon id=" + i + "Copy value=📋 onclick=FTCopy(" + i + ")><span class=tiptext># 40 #</span></div> ";
      Xpas = "<div class=tip><input type=button class=icon id=" + i + "Paste value=🖌️ onclick=FTPaste(" + i + ")><span class=tiptext># 41 #</span></div>";
      Xln2 = "<div class=fo><input type=checkbox id=" + i + "Inherit onclick=InheritChange(" + i + ") Checked># 21 # <input type=button class=icon id=" + i + "Inspect value=🔍 style='padding:0' onclick=Inspection(" + i + ")></div>";
      Xvue = "<div class=fo id=" + i + "FTView></div>";
    }
    ArrHTML1[i] = Xinc + "<div class=ft id=" + i + "FTtitle>" + ArrFolderTypeLang[i] + "</div><br>" + Z +
      "<div id=" + i + "FTsettings>" + Xln2 + Z +
      "<div class=fo id=" + i + "FTcontrols><select id=" + i + "View onchange=ViewChange(" + i + ")></select>" + Z +
      "<input type=text class=is id=" + i + "IconSize OnChange=IconSizeChange(" + i + ")>" + Z +
      "<input type=button id=" + i + "SelCol value='# 24 #' onclick=SelectColumns(" + i + ")>" + Z +
      "<div class=tip><input type=button class=icon id=" + i + "Option value=⚙ onclick=FTOptions(" + i + ")><span class=tiptext># 3 #</span></div>" + Z +
      Xcop + Xpas + "</div>" + Z +
      Xvue + Z +
      "<div class=cta id=" + i + "ColShow></div>" + Z +
      "<div class=fo># 22 #: <span id=" + i + "GroupBy></span></div>" + Z +
      "<div class=fo># 23 #: <span id=" + i + "SortBy></span></div>" + Z +
      "<div class='fo noshow' id=" + i + "FTDialogView># 44 #: <span id=" + i + "DialogView></span></div>" + Z +
      "</div><br><br>" + Z;
  }

  // Build column heading selection page
  for (i = 0; i <= ArrColData.length; i++) {
    if (ArrColData[i] == "") {
      ArrColData.length--;
      break;
    }
    ArrColumnEntry = ArrColData[i].split(";");
    C1 = ArrColumnEntry[1];
    C2 = ArrColumnEntry[0];
    ColShowColor(C1);
    ArrHTML2[i] = "<tr>" +
      "<td><input type=radio name=GroupBy onclick=RBGClick('" + C1 + "') id=G~" + C1 + " Value='" + C1 + "'></td>" +
      "<td><input type=radio name=RBS1 onclick=RBS1Click('" + C1 + "') id=S1~" + C1 + " Value='" + C1 + "'></td>" +
      "<td><input type=radio name=RBS2 onclick=RBS2Click('" + C1 + "') id=S2~" + C1 + " Value='" + C1 + "'></td>" +
      "<td><input type=radio name=RBS3 onclick=RBS3Click('" + C1 + "') id=S3~" + C1 + " Value='" + C1 + "'></td>" +
      "<td><input type=radio name=RBS4 onclick=RBS4Click('" + C1 + "') id=S4~" + C1 + " Value='" + C1 + "'></td>" +
      "<td><input type=text class=cw id=W~" + C1 + " maxlength=3 onclick=PixelInput('" + C1 + "')></td>" +
      "<td><input type=checkbox onclick=CBMClick('" + C1 + "') id=M~" + C1 + " Value='" + C1 + "'></td>" +
      "<td><input type=checkbox onclick=CBPClick('" + C1 + "') id=P~" + C1 + " Value='" + C1 + "'></td>" +
      "<td><span id=V~" + C1 + " class=" + x + " onmouseover='ShowC1(\"" + C1 + "\")' onmouseout='ShowC2(\"" + C1 + "\", \"" + Replace(C2, "'", "`") + "\")'>" + C2 + "</span></td>" +
      "<td><input type=text style=display:none id=L~" + C1 + " Value='" + C2 + "'></td>" +
      "<td><input type=text style=display:none id=N~" + C1 + "></td></tr>";
  }

  BodyHTML = TaggedHTML;
  BodyHTML = Replace(BodyHTML, "+++", ArrHTML1.join(""));
  BodyHTML = Replace(BodyHTML, "~~~", ArrHTML2.join(""));

  // 0 not used, 1 is title, 2 is first label
  for (i = 2; i <= ArrLang.length; i++) {
    Tag = "# " + i + " #";
    Item = ArrLang[i];
    if (Item != "") {
      BodyHTML = Replace(BodyHTML, Tag, Item);
    }
  }

  if (WinVer == "7" || WinVer == "8") {
    BodyHTML = Replace(BodyHTML, "⮬", "↑");
  }

  document.body.innerHTML = BodyHTML;
}

function document_onKeyDown() {
  // Recenter window if F1-F12 is pressed (also prevents F5 or Ctrl-F5 refresh)
  if (window.event.keyCode >= 112 && window.event.keyCode <= 123) {
    window.event.keyCode = 0;
    WinSizePos = "";
    Recenter();
  }
}

function UpdateESI() {
  esi.value = ess.options[ess.selectedIndex].value;
  ess.selectedIndex = 0;
  ess.blur();
}

function OptionESI() {
  ess.selectedIndex = 0;
  esi.select();
}

function OptionESB() {
  oFolder = oApp.BrowseForFolder(0, "", 1, "");
  if (!oFolder) return;
  esi.value = "";
  esi.value = oFolder.self.path;
  ess.selectedIndex = 0;
}
</script>

<style>
  @font-face {font-family:Segoe UI Emoji; src:url(seguiemj.eot)}
  body  {background-color:#B8D8E9; font-family:Segoe UI; font-size:11pt}
  input[type="button"] {font-family:Segoe UI Emoji; font-size:11pt}
  .icon {font-family:Segoe UI Emoji}
  select {font-family:Segoe UI; font-size:11pt}
  textarea {font-family:Consolas; font-size:10pt}
  h2    {font-size:1.5em}
  h3    {font-size:1.2em}
  .cta  {margin-top:5pt; width:100%}
  #fix1 {position:fixed; left:0; top:0; width:100%; background-color:#B8D8E9}
  #f1in {margin-left:5pt; margin-top:5pt}
  #twid {display:inline; white-space:nowrap}
  #bwid {display:inline; white-space:nowrap}
  #Sec1 {margin-top:106pt}
  #fix2 {position:fixed; left:0; top:0; width:100%; background-color:#B8D8E9}
  #f2in {margin-top:5pt; margin-bottom:0pt}
  #Pg1  {visibility:hidden}
  #Pg2  {display:none}
  #Pg3  {display:none}
  #fix4 {position:fixed; left:0; top:0; width:100%; background-color:#B8D8E9}
  #f4in {margin-left:5pt; margin-right:5pt}
  #fix5 {position:fixed; left:0; top:0; width:100%; background-color:#B8D8E9}
  #f5in {margin-left:5pt; margin-right:5pt}
  #Pg4  {display:none}
  #Pg5  {display:none}
  .cw   {width:38%; height:100%; font-size:1em}
  #BkP2 {float:right; margin-right:10pt; font-family:WingDings; width:3em}
  #BkP3 {float:right; font-family:WingDings; width:3em}
  #BkP4 {float:right; font-family:WingDings; width:3em}
  #BkP5 {float:right; font-family:WingDings; width:3em}
  .fl1  {float:left; margin-left:5pt}
  .fl2  {float:left; margin-left:3pt}
  .fl3  {float:left; margin-left:3pt; margin-right:3pt}
  .ft   {font-size:1.2em; font-weight:bold; margin-top:1pt; margin-bottom:1pt; display:inline}
  .ftl  {font-size:1.2em; font-weight:light; margin-top:1pt; margin-bottom:1pt; display:inline}
  .ft2  {font-weight:bold; margin-top:1pt; margin-bottom:1pt; margin-left:5pt}
  .fo   {margin-top:5pt}
  #tab1 {margin-bottom:5pt; margin-top:9pt; margin-left:11px; border-collapse:collapse}
  #tcin {margin-top:62pt}
  #tab2 {border-collapse:collapse}
  #cs   {width:98%; margin-left:5pt; margin-top:8pt; white-space:nowrap; overflow-x:scroll}
  #Txt1 {width:100%; margin-top:5pt; overflow:auto}
  #Txt2 {width:100%; margin-top:5pt; overflow:auto}
  .X1   {color:black}
  .X2   {color:blue}
  .X3   {color:black}
  .X4   {color:blue}
  .X1HC {font-style:normal}
  .X2HC {font-style:italic}
  .X3HC {font-style:normal}
  .X4HC {font-style:italic}
  #tpv  {margin-left:1.5em; margin-top:3pt}
  .is   {width:2em}
  .noshow {display:none}
  .opt  {line-height:250%}
  .shield {height:1em; vertical-align:middle}

  #tab1 tbody td {text-align:center}
  #tab2 tbody td {text-align:center}
  #tab2 tbody td+td+td+td+td+td+td+td+td {text-align:left}

  .tip {
    display:inline;
    font-weight:normal;
    color:Black
  }
  .tiptext {
    visibility:hidden;
    position:absolute;
    z-index:1;
    white-space:nowrap;
    background-color:Azure;
    text-align:center;
    padding:0.3em 0.3em 0.3em 0.3em;
    border:1px solid black;
    margin-top:2.2em;
    margin-left:-1.5em
  }
  .tip:hover .tiptext {
    visibility:visible
  }

</style>
</head>
<body>
  <div id=Pg1>
    <div id=fix1>
    <div id=f1in>
      <div id=twid>
        <div class=tip><input type=button id=hb value='# 31 #' onclick=Help("https://lesferch.github.io/WinSetView/#how-to-use")>
        <span id=Vp1 class=tiptext></span></div>
        <div class=tip><input id=bc1 type=button value='⛶' onclick=RecenterButton()>
        <span class=tiptext># 42 #</span></div>
        <select id=Lang onchange='UpdateLang(1)'></select>
        <select id=IFace onchange='SetInterface()'>
          <option selected disabled># 32 #</option>
          <option># 33 #</option>
          <option># 34 #</option>
        </select>
        <select id=Font1 onchange=UpdateFont1()></select>
        <select id=Size1 onchange=UpdateFont1()></select>
        <select id=xs onchange=xschange()></select>
        <select id=Theme onchange=SetTheme()>
        </select>
      </div>
      <br><br>
      <input type=checkbox id=wd onclick=OptionReset()># 7 # &nbsp &nbsp
      <input type=checkbox id=bu ># 72 # &nbsp &nbsp
      <div class=tip><input type=button id=lb class=icon value='📄' onclick=LoadSettings()><span class=tiptext># 4 #</span></div>
      <div class=tip><input type=button id=sb class=icon value='📝' onclick=SaveSettings()><span class=tiptext># 5 #</span></div>
      <br><br>
      <div id=bwid>
        <input type=button id=xb value='# 2 #' onclick=Submit()>
        <input type=button id=ob value='# 69 #' onclick=FVOptions()>
        <input type=button id=eb value='# 70 #' onclick=ExpOptions()>
        <input type=button id=rb value='# 6 #' onclick=Restore()>
        <br><br>
      </div>
    </div>
    </div>
    <div id=Sec1>
    <input type=checkbox id=ica onclick=IncludeAll() Checked>
    +++
    </div>
  </div>

  <div id=Pg2>
    <div id=fix2>
    <div id=f2in>
      <input type=button value='&#223;' id=BkP2 onclick=P2Exit()>
      <div class='tip fl1'><input type=button value='# 31 #' onclick=Help("https://lesferch.github.io/WinSetView/Manual.html#columns")>
      <span id=Vp2 class=tiptext></span></div>
      <div class='tip fl2'><input id=bc2 type=button value='⛶' onclick=RecenterButton()>
      <span class=tiptext># 42 #</span></div>
      <div class='tip fl3'><input id=ba type=button value='⮀' onclick=Arrange()>
      <span class=tiptext># 36 #</span></div>
      <h3 id=P2tt class=ft2></h3>
      <div id=cs></div>
      <table id=tab1>
        <colgroup>
          <col style='width:3.2em; min-width:3.2em; max-width:3.2em'>
          <col style='width:1.9em; min-width:1.9em; max-width:1.9em'>
          <col style='width:1.9em; min-width:1.9em; max-width:1.9em'>
          <col style='width:1.9em; min-width:1.9em; max-width:1.9em'>
          <col style='width:1.9em; min-width:1.9em; max-width:1.9em'>
          <col style='width:4.6em; min-width:4.6em; max-width:4.6em'>
          <col style='width:3.0em; min-width:3.0em; max-width:3.0em'>
          <col style='width:3.0em; min-width:3.0em; max-width:3.0em'>
        </colgroup>
        <tbody>
          <tr>
          <th><div class=tip><input type=button id=cbg value='{⮬}' onclick=GroupByClick() style='height:2em; padding:0; width:2em'><span class=tiptext># 22 #</span></div></th>
          <th><div class=tip><input type=button id=cbs1 value='⮬' onclick=SortBy1Click() style='height:2em; padding:0; width:1.6em'><span class=tiptext># 14 #</span></div></th>
          <th><div class=tip><input type=button id=cbs2 value='⮬' onclick=SortBy2Click() style='height:2em; padding:0; width:1.6em'><span class=tiptext># 15 #</span></div></th>
          <th><div class=tip><input type=button id=cbs3 value='⮬' onclick=SortBy3Click() style='height:2em; padding:0; width:1.6em'><span class=tiptext># 16 #</span></div></th>
          <th><div class=tip><input type=button id=cbs4 value='⮬' onclick=SortBy4Click() style='height:2em; padding:0; width:1.6em'></div></th>
          <th><div class=tip><input type=button id=cbw value='⟷' onclick=WidthClick() style='height:2em; padding:0; width:2em'><span class=tiptext># 18 #</span></div></th>
          <th><div class=tip><input type=button id=cbo value='⋮⋮⋮' onclick=View1Click() style='height:2em; padding:0; width:2em'><span class=tiptext># 19 #</span></div></th>
          <th><div class=tip><input type=button id=cbc value='⋮' onclick=View2Click() style='height:2em; padding:0; width:2em'><span class=tiptext># 20 #</span></div></th>
          </tr>
        </tbody>
      </table>
    </div>
    </div>
    <div id=tc>
    <div id=tcin>
      <table id=tab2>
        <colgroup>
          <col style='width:3.2em; min-width:3.2em; max-width:3.2em'>
          <col style='width:1.9em; min-width:1.9em; max-width:1.9em'>
          <col style='width:1.9em; min-width:1.9em; max-width:1.9em'>
          <col style='width:1.9em; min-width:1.9em; max-width:1.9em'>
          <col style='width:1.9em; min-width:1.9em; max-width:1.9em'>
          <col style='width:4.6em; min-width:4.6em; max-width:4.6em'>
          <col style='width:3.0em; min-width:3.0em; max-width:3.0em'>
          <col style='width:3.0em; min-width:3.0em; max-width:3.0em'>
        </colgroup>
        <tbody>
          ~~~
        </tbody>
      </table>
    </div>
    </div>
  </div>

  <div id=Pg3>
    <div id=P3hd>
      <input type=button value='&#223;' ID=BkP3 OnClick=Back2Pg1()>
      <select id=Font2 onchange=UpdateFont2()></select>
      <select id=Size2 onchange=UpdateSize2()></select>
    </div>
    <textarea id=Txt1 wrap=off onscroll=Txt1Scroll()></textarea>
    <textarea id=Txt2 wrap=off onscroll=Txt2Scroll()></textarea>
  </div>

  <div id=Pg4>
    <div id=fix4>
    <div id=f4in>
      <input type=button value='&#223;' ID=BkP4 OnClick=Back2Pg1()>
      <div class='tip fl2'><input type=button value='# 31 #' onclick=Help("https://lesferch.github.io/WinSetView/Manual.html#folder-view-options-1")>
      <span id=Vp3 class=tiptext></span></div>
      <div class='tip fl3'><input id=bc3 type=button value='⛶' onclick=RecenterButton()>
      <span class=tiptext># 42 #</span></div>
      <h2># 69 #</h2>
    </div>
    </div>
    <div class=opt id=Sec4>
      <input type=checkbox id=so Checked onclick=OptionSearchOnly()># 9 #<br>
      <div id=LSDiv>
        <input type=checkbox id=ls onclick=OptionLS()># 60 #<br>
        <div id=lss style='display:none'>
          <input type=checkbox id=fr># 61 #<br>
        </div>
      </div>
      <input type=checkbox id=vf Checked># 29 #<br>
      <input type=checkbox id=gn Checked># 10 #<br>
      <input type=checkbox id=hg># 52 #<br>
      <input type=checkbox id=lg># 66 #<br>
      <input type=checkbox id=tp onclick=OptionThisPC()># 13 #<br>
      <div id=otp><select id=tpv></select> <input type=checkbox id=tpg checked># 25 #</div>
    </div>
  </div>

  <div id=Pg5>
    <div id=fix5>
    <div id=f5in>
      <input type=button value='&#223;' ID=BkP5 OnClick=Back2Pg1()>
      <div class='tip fl2'><input type=button value='# 31 #' onclick=Help("https://lesferch.github.io/WinSetView/Manual.html#explorer-options-1")>
      <span id=Vp4 class=tiptext></span></div>
      <div class='tip fl3'><input id=bc4 type=button value='⛶' onclick=RecenterButton()>
      <span class=tiptext># 42 #</span></div>
       <div class='tip fl3'><input type=button class=icon value='🔍' onclick=DetectExpOptions()>
      <span class=tiptext># 71 #</span></div>
      <h2># 70 #</h2>
    </div>
    </div>
    <div class=opt id=Sec5>
      <input type=checkbox id=se Checked># 8 #<br>
      <input type=checkbox id=cv Checked># 27 #<br>
      <input type=checkbox id=hf># 67 #<br>
      <input type=checkbox id=cm># 47 #<br>
      <input type=checkbox id=mc># 68 #<br>
      <input type=checkbox id=si># 48 #<br>
      <input type=checkbox id=sh># 49 #<br>
      <input type=checkbox id=nf># 35 #<br>
      <input type=checkbox id=ua># 50 #<br>
      <input type=checkbox id=ns># 11 #<br>
      <input type=checkbox id=ex># 57 #<br>
      <input type=checkbox id=nn># 53 # <img class=shield src='uac.png'><br>
      <input type=checkbox id=ts onclick=OptionTS()># 54 # <img class=shield src='uac.png'><br>
      <div id=tss style='display:none'>
        <input type=checkbox id=sc># 51 #<br>
      </div>
      <div id=ees style='display:none'>
        <input type=checkbox id=ee># 55 # <img class=shield src='uac.png'><br>
      </div>
      <input type=checkbox id=ld># 56 # <img class=shield src='uac.png'><br>
      <input type=checkbox id=pd># 76 # <img class=shield src='uac.png'><br>
      <input type=checkbox id=es onclick=OptionES()># 58 #<br>
      <div id=esd>
        <input type=radio name=eso id=rbes1 value=1 onclick=OptionES()># 62 # &nbsp
        <input type=radio name=eso id=rbes2 value=2 onclick=OptionES()># 63 # &nbsp
        <input type=radio name=eso id=rbes3 value=3 onclick=OptionES()># 64 # &nbsp
        <input type=radio name=eso id=rbes4 value=4 onclick=OptionES()># 65 #
      </div>
      <div id=esd2>
        <input id=esi type="text" value="C:\" style=width:99% onclick=OptionESI()><br>
        <select id=ess  onchange=UpdateESI()>
          <option selected disabled># 59 #</option>
          <option>shell:Profile</option>
          <option>shell:Desktop</option>
          <option>shell:ThisPCDesktopFolder</option>
          <option>shell:Local Documents</option>
          <option>shell:Local Music</option>
          <option>shell:Local Pictures</option>
          <option>shell:Local Videos</option>
          <option>shell:Libraries</option>
          <option>shell:DocumentsLibrary</option>
          <option>shell:MusicLibrary</option>
          <option>shell:PicturesLibrary</option>
          <option>shell:VideosLibrary</option>
        </select>
        <input type=button id=edb class=icon value=📁 style='height:1.7em' onclick=OptionESB()><br>
      </div>
    </div>
  </div>

</body>
</html>